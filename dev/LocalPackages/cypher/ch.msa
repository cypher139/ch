######################################################
#
#   CH: Developer debug tools for making CommandHelper scripts..
#   These scripts make it easier for you to debug what's going on in your scripts, or just /reloadaliases easily.
#
######################################################

admin:/ch [$action] [$] = >>>
@name = 'ch'
@args = parse_args($)
@player = player()
# Get other player name  
foreach(@v in @args) {
	if(array_contains_ic(all_players(), @v)) {
		@otherplayer = player(@v)
	}
}

@action = to_lower($action)
@option1 = ''
@option2 = ''
if(array_index_exists(@args, 0)) { @option1 = @args[0] } 
if(array_index_exists(@args, 1)) { @option2 = @args[1] } 


if(array_contains(all_players(), @option1)) { @player = @option1 }
@playerID = _getplayerID(@player)

#action list help
proc(_ch_help,
	msg(color(6).'CommandHelper debug scripts help:')
	msg(color('a').'Command usage: <required> [optional]')
	msg(color('a').'/ch <action> [option1] [option2]')
	msg(color(6).'Actions:')
	msg(color(7).'/ch dumpevents'.color(4).' - '.color('f').'Dumps output of the dump_events() function, which tells all events CH is listening to and their file locations.')
	msg(color(7).'/ch pinfo <player>'.color(4).' - '.color('f').'Dumps all output of the pinfo() function, which lists random infomation about the specified player')
	msg(color(7).'/ch tolower <text>'.color(4).' - '.color('f').'Returns an all-lowercase version of the text provided.')
	msg(color(7).'/ch toupper <text>'.color(4).' - '.color('f').'Returns an all-uppercase version of the text provided.')
	msg(color(7).'/ch verbose'.color(4).' - '.color('f').'Turns on/off "verbose": extra messages in scripts that primarily might be considered spam, hence a option to enable/disable them.')
	msg(color(7).'/ch dev'.color(4).' - '.color('f').'Turns on/off "dev": developer messages in scripts primarily used in debugging.')
	msg(color(7).'/ch extfunctions'.color(4).' - '.color('f').'Shows available Extension Events and Functions.')
	msg(color(7).'/ch ext'.color(4).' - '.color('f').'Shows installed extensions.')
	msg(color(7).'/ch'.color(4).' - '.color('f').'Reloads aliases and reloads dev message settings.')
)

@prefix = color(7).'['.color(6).@name.color(7).'] '

switch(@action){

case 'r':
run_cmd(/recompile)

case 'help':
case '-help':
case '?':
case '/?':
	_ch_help()
case 'version':
case 'build':
case 'info':
	msg(@prefix.engine_build_date())
	
case 'export':
case 'ex':
case 'import':
case 'im':
case 'clearvalue':
case 'cv':
case 'getvalue':
case 'gv':
case 'hasvalue':
case 'hv':
case 'storevalue':
case 'sv':
case 'getvalues':
case 'gvs':
case 'hasvalues':
case 'hvs':
case 'clearvalues':
case 'cvs':
case 'hasexport':
case 'he':
case 'ci':
	call_alias(/chdb @action $)	

case 'events':
case 'dumpevents':
case 'ev':
	msg(@prefix.color(7).'-----')
	msg(@prefix.color(7).'Current binded events:')
	msg(@prefix.color(7).'-----')
	@j = 0
	@previoustype = ''
	foreach(@k: @v in dump_events()) {
	# Parsing: (event_type) Event.ID:/file/system/path/file.ms:24
		@eventtype = reg_split(' ', reg_replace('^\\((.+)\\)', '$1', @v))[0]
		@eventid = reg_replace('^\\((.+)\\)[ ]', '', reg_split('[:]', @v)[0])
	#if last type matches, don't choose a new color. Otherwise inc unique types counter and colors.
		if(@previoustype != @eventtype) {	
			if(_is_even_number(@j) == true) { @color = 'e' } else { @color = 3 }
			@j++
		}
		@previoustype = @eventtype
		@pathdisplay = reg_split('\\/CommandHelper\\/', @v)[1]
		if(reg_count('(includes.library)', @pathdisplay) > 0) {
			@pathdisplay = 'includes.library/'.reg_split('\\/includes.library\\/', @pathdisplay)[1]
		}
		msg(color(@color).@eventtype.'      [ '.color(9).@eventid.color(@color).' ]')		
		msg(color(8).'Path: '.color(0).'../'.color(8).@pathdisplay)
	}
	msg(@prefix.color(7).'-----')
	msg(color(9).@j.color(7).' event types,  '.color(6).array_size(dump_events()).color(7).' total events found.')
	msg(@prefix.color(7).'-----')

case 'pinfo':
	msg(@prefix.color(7).'-----')
	msg(@prefix.color(7).'Player info:')
	msg(@prefix.color('d').'(0) name: '.color('f').pinfo(@player)[0])
	msg(@prefix.color('d').'(1) location: '.color('f').pinfo(@player)[1])
	msg(@prefix.color('d').'(2) cursor: '.color('f').pinfo(@player)[2])
	msg(@prefix.color('d').'(3) ip: '.color('f').pinfo(@player)[3])
	msg(@prefix.color('d').'(4) displayname: '.color('f').pinfo(@player)[4])
	msg(@prefix.color('d').'(5) health: '.color('f').pinfo(@player)[5])
	msg(@prefix.color('d').'(6) iteminhand: '.color('f').pinfo(@player)[6])
	msg(@prefix.color('d').'(7) worldname: '.color('f').pinfo(@player)[7])
	msg(@prefix.color('d').'(8) isop: '.color('f').pinfo(@player)[8])
	msg(@prefix.color('d').'(9) groups: '.color('f').pinfo(@player)[9])
	msg(@prefix.color('d').'(10) hostname: '.color('f').pinfo(@player)[10])
	msg(@prefix.color('d').'(11) sneak: '.color('f').pinfo(@player)[11])
	msg(@prefix.color('d').'(12) host: '.color('f').pinfo(@player)[12])
	msg(@prefix.color('d').'(13) entity uuid: '.color('f').pinfo(@player)[13])
	msg(@prefix.color('d').'(14) vehicle: '.color('f').pinfo(@player)[14])
	msg(@prefix.color('d').'(15) current slot number: '.color('f').pinfo(@player)[15])
	msg(@prefix.color('d').'(16) sleeping: '.color('f').pinfo(@player)[16])
	msg(@prefix.color('d').'(17) blocking: '.color('f').pinfo(@player)[17])
	msg(@prefix.color('d').'(18) flying: '.color('f').pinfo(@player)[18])
	msg(@prefix.color('d').'(19) sprinting: '.color('f').pinfo(@player)[19])
	msg(@prefix.color('d').'(20) Player UUID: '.color('f').pinfo(@player)[20])
	msg(@prefix.color(7).'-----')

case 'tolower':
case 'lower':
	if(array_size(@args) == 0) { die(color('c').'['.color(6).@name.color('c').'] '.color('c').'You have to say something!') }
	@text = array_implode(@args)
	@r = to_lower(@text)
	msg(@prefix.color(6).'Convert to lowercase:')
	msg(@prefix.color(7).'Original text: '.@text)
	msg(@prefix.color('d').'New text: '.color('f').@r)

case 'toupper':
case 'upper':
	if(array_size(@args) == 0) { die(color('c').'['.color(6).@name.color('c').'] '.color('c').'You have to say something!') }
	@text = array_implode(@args)
	@r = to_upper(@text) 
	msg(@prefix.color(6).'Convert to uppercase:')
	msg(@prefix.color(7).'Original text: '.@text)
	msg(@prefix.color('d').'New text: '.color('f').@r)

case 'verbose':
	@verbosesetting = get_value(@name.'.player.'.@playerID['id'].'.verbose')
	if(!is_boolean(@verbosesetting)) { @verbosesetting = false }
	@verbosesetting = !@verbosesetting
	store_value(@name.'.player.'.@playerID['id'].'.verbose', @verbosesetting)
	export(@name.'.player.'.@playerID['id'].'.verbose', @verbosesetting)
	if(@verbosesetting == true) {
		die(@prefix.color('a').'Enabled! '.color(7).'Verbose messages are enabled! If the script you use supports displaying extra messages using a global value, they will be displayed.')
	} else {
		die(@prefix.color('c').'Disabled! '.color(7).' Extra messages from scripts won\'t be displayed.')
	}

case 'dev':
case 'devmsg':
	@sendargs = array_implode(@args, ' ')
	call_alias(/devmsg @sendargs)

case 'extfunctions':
case 'extinfo':
	msg(@prefix.color(6).'Available Extension Events/Functions:')
	foreach(@ext: @data in extension_info()) {
		if(@ext == 'Core') { continue() }
		if(array_size(@data['events']) != 0) { 
			msg(@prefix.color(3).@ext.' '.color(2).'Events: '.color(7).@data['events'])
		}
		if(array_size(@data['functions']) != 0) { 
			msg(@prefix.color(3).@ext.' '.color(9).'Functions: '.color(7).@data['functions'])
		}
	} 
case 'extensions':
case 'ext':
	msg(@prefix.color(6).'Installed Extensions:')
	foreach(@ext: @data in extension_info()) {
		if(@ext == 'Core') { continue() }
		msg(@prefix.color(3).@ext.' '.color(7).'( Version: '.@data['version'].' )')
	}   
case 'player':
#	msg(vault_pgroup(@player, prefix))
#	msg(to_lower('50'))
	try(
		msg(puuid(@args[0], 'dashless'))
	,@fail, 
		msg('no puuid()')
	)
	try( 
		msg(player(@args[0]))
	,@fail, 
		msg('no player()')
	)

case 'randnumber':
	@rand = rand(@args[0], @args[1])
	msg(@rand)
case 'even':
	@return = _is_even_number(@args[0], @args[1])
	if(@return == true) { @cr = 'a' } else { @cr = 'c' }
	msg(@prefix.color(9).'Even Number? '.color(@cr)._capitalize(@return))

case 'number':
#unexpected results do not rely on
	msg('integer: '.is_integer(@args[0]))
	msg('number: '.is_number(@args[0]))
	msg('integral: '.is_integral(@args[0]))
	msg('numeric: '.is_numeric(@args[0]))
	msg(reg_count('(\\.)', @args[0]))
	msg(reg_split('(\\.)', @args[0]))
	msg(round(@args[0]))

case 'props':
	msg(@prefix.color(6).'Server.properties:')
	msg(ini_decode(read(file_resolve(sys_properties()['user.dir'].'/server.properties'))))
case 'isproc':
	msg(@prefix.color(6).'is proc "'.@args[0].'? '.color('d').is_proc(@args[0]))
case 'cap':
	msg(_capitalize(@args[2..], @args[0], @args[1]))

case 'gc':
	msg(get_commands())
case 'rd':
	msg(reflect_docs(@args[0], 'description'))
case 'sd':
case 'date':
	if(is_numeric(@args[0])) {
		msg(simple_date('MM/dd/yyyy HH:mm:ss', @args[0]))
	} else {
		msg('Not a timestamp?')
	}

case '':
case null:
	@ds = get_value('ch.player.'.@playerID['id'].'.dev.scripts')
	if(!is_array(@ds)) { @ds = array() }
	if(array_contains(@ds, 'all') || @player == '~console') {
		run(/reloadaliases)
		if(array_contains(@ds, 'all')) { @dsall = true } else { @dsall = false }
		foreach(@script in @ds) {
			export('ch.player.'.@playerID['id'].'.dev.scripts.'.@script, true)
		}
		export('ch.player.'.@playerID['id'].'.developer', @dsall)
		export('ch.player.'.@playerID['id'].'.dev.scripts', @ds)
		die()
	}
	msg(color('red').'['.color(6).@name.color('red').'] '.color('red').'No action specified.')
	_ch_help()
default:
	msg(color('red').'['.color(6).@name.color('red').'] '.color('red').'Action not recognized.')
}
<<<


cypher139:/chdb [$action] [$] = >>>
@name = 'db'
@args = parse_args($)
@player = player()
# Get other player name  
foreach(@v in @args) {
	if(array_contains_ic(all_players(), @v)) {
		@otherplayer = player(@v)
	}
}

@action = to_lower($action)
@option1 = ''
@option2 = ''
if(array_index_exists(@args, 0)) { @option1 = @args[0] } 
if(array_index_exists(@args, 1)) { @option2 = @args[1] } 


if(array_contains(all_players(), @option1)) { @player = @option1 }
@playerID = _getplayerID(@player)

if(array_size(@args) == 0) { array_push(@args, player()) }

#action list help
proc(_ch_help,
	msg(color(6).'CommandHelper Database help:  '.color('c').'FOR DEBUG USE ONLY.')
	msg(color('a').'Command usage: <required> [optional]')
	msg(color('a').'/chdb <action> [option1] [option2]')
	msg(color(6).'Actions:')
	msg(color(7).'/chdb clearvalue <player> <value>'.color(4).' - '.color('f').'Clears the specified value in ch\'s persistance file. FOR DEBUG USE ONLY.')
	msg(color(7).'/chdb getvalue <value>'.color(4).' - '.color('f').'Gets the specified value from ch\'s persistance file.')
	msg(color(7).'/chdb hasvalue <player> <value>'.color(4).' - '.color('f').'Returns if the specified value exists.')
	msg(color(7).'/chdb storevalue <value> <data>'.color(4).' - '.color('f').'Stores the data into the specified value in ch\'s persistance file. FOR DEBUG USE ONLY.')
	msg(color(7).'/chdb getvalues <player> [value]'.color(4).' - '.color('f').'Gets the values from the specified key. If none is provided, tries the current player.')
	msg(color(7).'/chdb export <value> <data>'.color(4).' - '.color('f').'Stores the data into the specified value into ch\'s memory persistance, that will be lost on server reboot. FOR DEBUG USE ONLY.')
	msg(color(7).'/chdb import <value>'.color(4).' - '.color('f').'Gets the specified value from ch\'s memory persistance.')
)

@prefix = color(7).'['.color(6).@name.color(7).'] '

switch(@action){
case 'export':
	if(@args[0] == 'undo') {
		@undo = import('ch.export.undo', array())
		if(array_size(@undo) == 0) {
			msg(@prefix.color(6).'There is no data to restore.')
		} else {
			export(@key, @data)
			msg(@prefix.color(6).'Restored '.@undo[0].' to :'.@undo[1])
		}
		die()
	}
	export('ch.export.undo', array(@args[0], @args[1..]))
	
	msg(@prefix.color(6).'Export: '.color('d').@args[0])
	export(@args[0], @args[1..])
	@v = import(@args[0])
	msg(@prefix.color(6).'Value '.@args[0].' exported to: '.color(7).@v)

case 'import':
	@v = import(@args[0])
	@arraymsg = ''
	@as = 0
	@color = 7
	if(is_array(@v)) {
		@as = array_size(@v)
		@arraymsg = color(3).' Array size: '.@as
		if(array_index_exists(@args, 1)) {
			if(array_index_exists(@v, @args[1])) {
				@v = color(3).'Index: '.@args[1].'\n'.color(@color).@v[@args[1]]
			} else {
				@v = color(12).'Index '.@args[1].' was not found!'
			}
		}
	} else {
		switch(@v) {
		case true:
			@color = 10
		case false:
			@color = 12
		case null:
			@color = 8
		}
	}
	msg(@prefix.color(6).'Import: '.color('d').@args[0].@arraymsg.color('f').' returned:')
	msg(color(@color).@v)
	if(@as > 9) { msg(@prefix.@arraymsg) }
	
	
case 'clearvalue':
case 'cv':
	if(array_size(@args) == 0) { array_push(@args, player()) }
	msg(@prefix.color(6).'Clear value: '.color('d').@args[0])
	
	if(has_value(@args[0]) == true) {
		clear_value(@args[0])
		if(has_value(@args[0]) == false) { msg(@prefix.color(10).'Successfully cleared value.') }
	} else {
		msg(@prefix.color(12).'That value does not exist.')
	}

case 'getvalue':
case 'gv':
	if(array_size(@args) == 0) { array_push(@args, player()) }
	@v = get_value(@args[0])
	@type = reg_replace('[:]?ms[.]lang[.]', '', typeof(@v))
	@arraymsg = ''
	@as = 0
	@color = 7
	if(is_array(@v)) {
		@as = array_size(@v)
		@arraymsg = color(3).' Array size: '.@as
		if(array_index_exists(@args, 1)) {
			if(array_index_exists(@v, @args[1])) {
				@v = color(3).'Index: '.@args[1].'\n'.color(@color).@v[@args[1]]
			} else {
				@v = color(12).'Index '.@args[1].' was not found!'
			}
		}
	} else {
		switch(@v) {
		case true:
			@color = 10
		case false:
			@color = 12
		case null:
			@color = 8
		default:
			if(is_numeric(@v)) { @color = 9 }
		}
	}
	msg(@prefix.color(6).'Value: '.color('d').@args[0].color(7).' is_'.@type.@arraymsg)
	msg(color(@color).@v)
	if(@as > 9) { msg(@prefix.@arraymsg) }
	
case 'clearindex':
case 'ci':
	if(array_size(@args) == 0) { array_push(@args, player()) }
	if(!array_index_exists(@args, 0)) { die(@prefix.'Specify a value with an array!') }
	if(!array_index_exists(@args, 1)) { die(@prefix.'Specify index to remove!') }
	@v = get_value(@args[0])
	@arraymsg = ''
	@msg = ''
	@as = 0
	@color = 7
	if(is_array(@v)) {
		@as = array_size(@v)
		@arraymsg = color(3).' Array size: '.@as
		if(array_index_exists(@v, @args[1])) {
			@msg = color('a').'Removed!'
			array_remove(@v, @args[1])
			store_value(@args[0], @v)
		} else {
			@msg = color(12).'Index was not found!'
		}
	} else {
		die(@prefix.color(12).'Value is Not an Array!')
	}
	msg(@prefix.color(6).'Clear Index: '.color(3).@args[1].color('r').' from '.color('d').@args[0])
	msg(@msg)
	

case 'hasvalue':
case 'hv':
	if(array_size(@args) == 0) { 
		@hv = color('e').'eh, what value?!'
	} else if(has_value(@args[0]) == true) {
		@hv = color('a').'That value exists!'
	} else {
		@hv = color('c').'That value does not exist.'
	}
	msg(@prefix.@hv)

case 'storevalue':
case 'sv':
# BUGS

# stores t/f as string
	@old = get_value(@args[0])
	if(@args[0] == 'undo') {
		@undo = import('ch.sv.undo', array())
		if(array_size(@undo) == 0) {
			msg(@prefix.color(6).'There is no data to restore.')
		} else {
			store_value(@undo[0], @undo[1])
			msg(@prefix.color(6).'Restored '.color('d').@undo[0].color(6).' to: '.color(7).@undo[1])
		}
		die()
	}
	if(array_size(@args) < 2) { die(@prefix.color('c').'Not enough arguments provided.') }
	@new = @args[1..]
	msg(@prefix.color(6).'Store value: '.color('d').@args[0])
	msg(@prefix.color(6).'Previous: '.color(7).@old)
	export('ch.sv.undo', array(@args[0], @old))
	switch(@args[1]) {
	case 'array':
		if(array_index_exists(@args, 2)) {
			@new = @args[2..]
		} else {
			@new = array()
		}
	case 'string':
		if(array_index_exists(@args, 2)) {
			@new = string(array_implode(@args[2..], ' '))	
		} else {
			@new = string('')
		}
	case 'int':
	case 'integer':
		if(!array_index_exists(@args, 2)) { die(@prefix.color('c').'Not enough arguments provided.') }
		if(!is_numeric(@args[2])) { die(@prefix.color('c').'Value is not a number.') }
		@new = integer(@args[2])
	case 'not':
		@new = !@old
	case 'null':
		@new = null
	default:
		@new = string(array_implode(@args[1..], ' '))
	}
	store_value(@args[0], @new)
	@v = get_value(@args[0])
	@type = reg_replace('[:]?ms[.]lang[.]', '', typeof(@v))
	msg(@prefix.color(6).'Saved '.color(3).@type.color(6).': '.color(7).@v)

case 'getvalues':
case 'gvs':
	if(array_size(@args) == 0) { array_push(@args, player()) }
	@v = get_values(@args[0])
	msg(@prefix.color(6).'Get values: '.color('d').@args[0])
	foreach(@key: @data in @v) {
		msg(color(2).@key.': '.color(7).@data)
	}
	msg(@prefix.color(3).'Total values found: '.array_size(@v))

case 'hasvalues':
case 'hvs':
	if(array_size(@args) == 0) { array_push(@args, player()) }
	@v = get_values(@args[0])
	msg(@prefix.color(6).'Has values: '.color('d').@args[0])
	foreach(@key: @data in @v) {
		msg(color(2).@key)
	}
	msg(@prefix.color(3).'Total values found: '.array_size(@v))
	
case 'clearvalues':
case 'cvs':
	if(array_size(@args) == 0) { die(@prefix.color('c').'Not enough arguments provided.') }
	if(@args[0] == 'undo') {
		@undo = import('ch.cvs.undo', array())
		if(array_size(@undo) == 0) {
			msg(@prefix.color(6).'There is no data to restore.')
		} else {
			foreach(@key: @data in @undo) {
				store_value(@key, @data)
			}
			msg(@prefix.color(6).'Restored '.array_size(@undo).' values.')
		}
		die()
	}
	@v = get_values(@args[0])
	export('ch.cvs.undo', @v)
	msg(@prefix.color(6).'Clear all values: '.color('d').@args[0])
	foreach(@key: @data in @v) {
		clear_value(@key)
		if(has_value(@key) == false) { msg(@prefix.color(6).'Cleared value: '.@key) }
	}
	msg(@prefix.color(1).'Total values cleared: '.array_size(@v))

case 'hasexport':
case 'he':
	@truecount = 0
	@changedcount = 0
	@truemsg = color(8).'None Found'
	@changedmsg = ''
	@falsemsg = ''
	@falsecount = 0
	@v = get_values(@args[0])
	msg(@prefix.color(6).'Has export copy: '.color('d').@args[0])
	foreach(@key: @data in @v) {
		@result = ''
		@import = import(@key, '~~~~~~')	
		if(@import == @data) {
			@result = color(2).' true'
			@truecount++
		} else if(@import == '~~~~~~') {
			@falsecount++
			@result = color(12).' false'
		} else { 
			@changedcount++
			@result = color(14).' changed'
		}
		msg(@key.@result)
	}
	if(@truecount > 0) { @truemsg = color(2).'True: '.@truecount }
	if(@changedcount > 0) { @changedmsg = color(14).' Changed: '.@changedcount }
	if(@falsecount > 0) { @falsemsg = color(12).' False: '.@falsecount }
	msg(@prefix.color(7).'Totals: '.@truemsg.@changedmsg.@falsemsg)	
	

default:
	msg(color('red').'['.color(6).@name.color('red').'] '.color('red').'Action not recognized.')
}
<<<