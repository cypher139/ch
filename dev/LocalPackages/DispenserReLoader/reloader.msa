######################################################
#
#   ReLoad: Fill blocks that have inventories in one click!
#   version 1.2-tmc
#
######################################################
#test layout:/rl      area       fuel       263         64
reloader:/reloader [$action] [$option1] [$option2] [$option3] [$] = >>>
#Include required backend functions
include('includes.library/reload-functions-Core.ms')
### What is the name of this script?
assign(@name, string(import('dispenserreloader.name')))
 
### Get server item defaults
@serveritemdefaults = _reloader_get_server_defaults()
@defaultitem = @serveritemdefaults['item']
@defaultitemqty = @serveritemdefaults['qty']
 
@action = to_lower($action)
@option1 = $option1
@option2 = $option2
@option3 = $option3
@player = _reloader_getplayerID(player())
@verbose = import(@name.'.player.'.@player['id'].'.verbose')
if(@verbose == null) {
	assign(@verbose, get_value(@name.'.player.'.@player['id'].'.verbose'))
	export(@name.'.player.'.@player['id'].'.verbose', @verbose)
}
assign(@dev, import('ch.player.'.@player['id'].'.dev.scripts.reload'))

set_uncaught_exception_handler(closure(@ex){
	msg(color('c').'['.color(6).@name.color('c').'] '.color(7).'An error has occured! Error ID: '.color(9).@ex['stackTrace'][0]['line'].'.'.@ex['stackTrace'][0]['col'])
	msg(color('c').'['.color(6).@name.color('c').'] '.color('c').@ex['message'])
	assign(@msg1, color('c').'['.color(6).@name.color('c').'] '.color('c').@ex['classType'].'! '.color(7).@ex['message'])
	if(@dev == true) {msg(@msg1)}
	console(@msg1, false)
	array_iterate(@ex['stackTrace'], closure(@k, @v) {
		assign(@pathdisplay, reg_split('\\/CommandHelper\\/', @v['file'])[1])
		if(reg_count('(includes.library)', @pathdisplay) > 0) {
			assign(@pathdisplay, 'includes.library/'.reg_split('\\/includes.library\\/', @pathdisplay)[1])
		}		
		assign(@msg2, color(9).'../'.@pathdisplay.color(7).' Line: '.color('a').@v['line'].'.'.@v['col'])
		console(color('c').'['.color(6).@name.color('c').'] '.@msg2, false)
		if(@dev == true) {msg(@msg2)}
	})
	return(true)
});

### Action list help
proc _reloader_help() {
	assign(@name, import('dispenserreloader.name'))
	msg(color(3).'DispenserReLoader: Fill chests or dispensers in one click!')
	msg(color(6).'- Help:')
	msg(color('a').'Command usage: action <required> [optional]')
	msg(color(6).'- Information:')
	msg(color(7).'/reloader help'.color(4).' - '.color('f').'Shows this help screen.')
	msg(color(7).'/reloader info'.color(4).' - '.color('f').'Shows your settings, such as the currently set item, or extra messages.')
	msg(color(7).'/reloader stats'.color(4).' - '.color('f').'Shows your statistics for '.@name.', such as the total area or tool runs, total blocks filled, total items used, etc.')
	msg(color(7).'/reloader verbose'.color(4).' - '.color('f').'Allows you to turn on or off extra messages '.@name.' can display.')
	msg(color(6).'- Special Item Types:')
	msg(color(7).'clear'.color(4).' - '.color('f').' Uses the server default item or quantity.')
	msg(color(7).'this'.color(4).' - '.color('f').' Uses what you are holding and its max stack size as the item and quantity to use.')
	msg(color(6).'- Actions:')
	msg(color(7).'Most commands support specifying the item type and quantity to use, or you can use "/reloader set" to always use a specific item without having to type it each time.')
	msg(color(7).'/reloader [item] [qty]'.color(4).' - '.color('f').'Binds the tool you are holding to fill any chest, dispenser, or furnace block with the specified item (defaults to arrows).')
	msg(color(7).'/reloader set <item> [qty]'.color(4).' - '.color('f').'Allows you to set what item type and quantity you would like to automatically use when you just type \'/reloader\'. Use "default" as your item type to reset to defaults.')
	msg(color(7).'/reloader area [item] [qty]'.color(4).' - '.color('f').'This uses your WorldEdit selection to fill every fillable block in the selection with the specified item (defaults to arrows). Useful for walls of death.')
	msg(color(7).'/reloader area fuel [item] [qty]'.color(4).' - '.color('f').'This uses your WorldEdit selection to fill every furnace\'s fuel in the selection with the specified item.')
	msg(color(7).'/reloader fuel [item] [qty]'.color(4).' - '.color('f').'This binds your tool to fill the fuel portion of a furnace, instead of filling the block to burn.')
	msg(color(7).'/reloader mode <itemtype>'.color(4).' - '.color('f').'Sets /reloader area to only fill a chest, dispenser, or furnace, or all 3 types. Useful for not wiping chest contents ;)')
	msg(color(7).'/reloader managebind'.color(4).' - '.color('f').'Unbind, or re-bind the '.@name.' tool to your currently held item!')
}

# More option conflicts:
# /reloader area fuel needs option variable conversions, due to the extra action command.
assign(@fuel, '')
switch(@action) {
case 's':
case 'set':
case '-set':
case 'a':
case 'ar':
case 'area':
case '-area':
case '-a':
	if(reg_count('^[fF]', @option1) > 0) {
		#item type = @option1
		assign(@option1, @option2)
		#item quantity = @option2
		assign(@option2, @option3)
		assign(@fuel, true)
		assign(@defaultitem, @serveritemdefaults['fuel'])
	}
case 'f':
case 'fuel':
	@fuel = true
}
 
# Setup previously set item type and quantity
assign(@setitem, get_value(@name.'.player.'.@player['id'].'.set.item.type'))
assign(@setitemqty, get_value(@name.'.player.'.@player['id'].'.set.item.qty'))
# Check: verify item name and qty is legit
if(@fuel == true) {
	assign(@setitem, get_value(@name.'.player.'.@player['id'].'.set.item.type.fuel'))
	if(_reloader_item_name(@setitem)['name'] == null) {
		@setitem = @serveritemdefaults['fuel']
		clear_value(@name.'.player.'.@player['id'].'.set.item.type.fuel')
		if(@dev == true) {msg(color(7).'[DEV]: '.color('f').'Set fuel type was not valid, reset to server default.')}
	}
} else {
	if(_reloader_item_name(@setitem)['name'] == null) {
		@setitem = @serveritemdefaults['item']
		clear_value(@name.'.player.'.@player['id'].'.set.item.type')
		if(@dev == true) {msg(color(7).'[DEV]: '.color('f').'Set item type was not valid, reset to server default.')}
	}
}
if(!is_integral(@setitemqty) || @setitemqty == 0) {
	@setitemqty = @serveritemdefaults['qty']
	clear_value(@name.'.player.'.@player['id'].'.set.item.qty')
	if(@dev == true) {msg(color(7).'[DEV]: '.color('f').'Set item qty was not valid, reset to server default.')}
}
 

### All Actions List:
switch(@action){
### These actions don't need the main parts of the script / the main checks to run, so they are listed here.
case 'help':
case '-help':
case '?':
case '/?':
	_reloader_help()
	die()
# Version check
case 'version':
case 'build':
case '-version':
case '-build':
	msg(color(7).'['.color(6).@name.color(7).'] '.color(3).'Version: '.import('dispenserreloader.version'))
	die()
# Extra messages
case '-verbose':
case 'verbose':
	#verbose already checked at start
	if(@verbose == true) {
		#disable
		store_value(@name.'.player.'.@player['id'].'.verbose', false)
		export(@name.'.player.'.@player['id'].'.verbose', false)
		die(color(7).'['.color(6).@name.color(7).'] '.color(3).'Extra messages are '.color('c').'disabled! '.color(7).@name.' will display only normal messages')
	} else {
		#enable
		store_value(@name.'.player.'.@player['id'].'.verbose', true)
		export(@name.'.player.'.@player['id'].'.verbose', true)
		die(color(7).'['.color(6).@name.color(7).'] '.color(3).'Extra messages are '.color('a').'enabled! '.color(7).@name.' will display more useful messages.')
	}
# Set which item type to fill on /reloader area
case '-mode':
case 'mode':
case 'setmode':
case 'areamode':
case 'm':
	assign(@setareamode, 'unset')
	assign(@msgaccepttypes, color(6).'Barrel'.color('f').', '.color(9).'Blast Furnace'.color('f').', '.color(6).'Brewing'.color('f').', '.color(9).'Chest'.color('f').', '.color(6).'Dispenser'.color('f').', '.color(9).'Furnace'.color('f').', '.color(6).'Shulker Box'.color('f').', '.color(9).'Smoker'.color('f').', '.color(6).'Trapped Chest.')
	assign(@msggrouptypes, color(2).'Group Options: \n'.color('a')."All".color('7').' - Use all block types listed. \n'.color('a')."Chests".color(7).' - Use Barrel/Chest/Shulker Box/Trapped Chest. \n'.color('a')."Furnaces"color(7).' - Use Blast Furnace/Brewing/Furnace/Smoker.')
	assign(@areamode, get_value(@name.'.player.'.@player['id'].'.area.mode'))
	if(@areamode == '' || @areamode == null) { @areamode = 'All' }
	#Switch doesn't support wildcard matching, so regex route it is.
	@option1 = to_lower(@option1)
	if(reg_count('^[a]', @option1) > 0) {	@setareamode = 'All' }
	if(reg_count('^[b][a]', @option1) > 0) { @setareamode = 'Barrel' }
	if(reg_count('^[b][l]', @option1) > 0) { @setareamode = 'Blast_Furnace' }
	if(reg_count('^[b][r]', @option1) > 0) { @setareamode = 'Brewing' }
	if(reg_count('^[c]', @option1) > 0) { @setareamode = 'Chest'
		if(reg_count('^[c].*[s]$', @option1) > 0) {
			@setareamode = 'Group_Chest'
		}
	}
	if(reg_count('^[d]', @option1) > 0) {
		@setareamode = 'Dispenser'
	}
	if(reg_count('^[f]', @option1) > 0) { @setareamode = 'Furnace'
		if(reg_count('^[b]', @option2) > 0) {
			@setareamode = 'Blast_Furnace'
		}
		if(reg_count('^[f].*[s]$', @option1) > 0) {
			@setareamode = 'Group_Furnace'
		}
	}
	if(reg_count('^[s][h]', @option1) > 0) { @setareamode = 'Shulker_Box' }
	if(reg_count('^[s][m]', @option1) > 0) { @setareamode = 'Smoker' }
	if(reg_count('^[t]', @option1) > 0) { @setareamode = 'Trapped_Chest' }
	# Groups
	if(reg_count('^[g].*[c]', @option1) > 0) { @setareamode = 'Group_Chest' }
	if(reg_count('^[g].*[f]', @option1) > 0) { @setareamode = 'Group_Furnace' }
	
	# Dyed shulker boxes
	if(reg_count('^.+[-_][s][h]', @option1) > 0) {
		@shcolor = reg_split('[-_][s]', @option1)
		@acceptshcolor = array('black', 'blue', 'brown', 'cyan', 'gray', 'green', 'light-blue', 'light-gray', 'light_blue', 'light_gray', 'lime', 'magenta', 'orange', 'pink', 'purple', 'red', 'white', 'yellow')
		if(array_contains(@acceptshcolor, @shcolor[0])) {	
			@setareamode = _reloader_capitalize(@shcolor[0], null, 1).'_Shulker_Box' 
		} else {
			die(color('c').'['.color(6).@name.color('c').'] '.color(7).'Please specify a *valid* type of dyed Shulker Box. Accepted dye colors are: \n'.color(9).array_implode(@acceptshcolor, ', '))
		}
	}
	
	if(@setareamode == 'unset' || @option1 = '' || @option1 = null) {
		msg(color(7).'['.color(6).@name.color(7).'] '.color(3).'Current Area mode: '.@areamode)
		die(color('c').'['.color(6).@name.color('c').'] '.color(7).'To change your area mode, please specify a *valid* type of item. Accepted item types are: '.@msgaccepttypes.'\n'.@msggrouptypes)
	}
	store_value(@name.'.player.'.@player['id'].'.area.mode', @setareamode)
	die(color(7).'['.color(6).@name.color(7).'] '.color(3).'Area mode set to: '._reloader_capitalize(@setareamode, 1))
# Information, such as the last item used, set modes, etc.
case 'info':
case '-i':
case 'i':
case '-info':
case 'view':
	assign(@lastitemused, _reloader_item_name(get_value(@name.'.player.'.@player['id'].'.last.item')))
	assign(@lastitemqty, get_value(@name.'.player.'.@player['id'].'.last.qty'))
	assign(@areamode, get_value(@name.'.player.'.@player['id'].'.area.mode'))
	if(@areamode == '' || @areamode == null) { @areamode = 'All' }
	assign(@di, get_value(@name.'.player.'.@player['id'].'.set.item.type'))
	if(@di == '' || @di == null) { @di = @serveritemdefaults['item'] }
	assign(@diq, get_value(@name.'.player.'.@player['id'].'.set.item.qty'))
	if(@diq == '' || @diq == null) { @diq = @serveritemdefaults['qty'] }
	assign(@dif, get_value(@name.'.player.'.@player['id'].'.set.item.type.fuel'))
	if(@dif == '' || @dif == null) { @dif = @serveritemdefaults['fuel'] }
	if(@verbose == true) {
		@vmsg = color('a').'Enabled'
	} else {
		@vmsg = color('c').'Disabled'
	}
	msg(color(7).'['.color(6).@name.color(7).'] '.color(6).@name.' settings information for: '.color('a').@player['display'])
	msg(color(7).'['.color(6).@name.color(7).'] '.color(3).'Set item: '.color('a').@di.color(9).' (Qty: '.@diq.')')
	msg(color(7).'['.color(6).@name.color(7).'] '.color(3).'Set fuel item: '.color('a').@dif)
	msg(color(7).'['.color(6).@name.color(7).'] '.color(3).'Last item used: '.color(7).@lastitemused['display'].' ['.@lastitemused['id'].'] '.color(9).'(Qty: '.@lastitemqty.')')
	msg(color(7).'['.color(6).@name.color(7).'] '.color(3).'Area mode: '.color(7)._reloader_capitalize(@areamode, 1))
	msg(color(7).'['.color(6).@name.color(7).'] '.color(3).'Verbose (extra) messages: '.@vmsg)
	die()
# Statistics: How many items have you used? how many blocks filled? How many times have you run reload?
case '-stats':
case 'stats':
case 'statistics':
case 'stat':
case 'st':
	msg(color(7).'['.color(6).@name.color(7).'] '.color(7).@name.' stats for: '.color(9).@player['display'])     
	assign(@atr, get_value(@name.'.player.'.@player['id'].'.stats.alltime.runs.area'))
	assign(@ttr, get_value(@name.'.player.'.@player['id'].'.stats.alltime.runs.tool'))
	# Stop with 0/null stuff if the player hasn't actually done anything.
	if(@atr == '' || @atr == null) {
		if(@ttr == '' || @ttr == null) {
			die(color('c').'['.color(7).@name.color('c').'] '.color('c').'You haven\'t done anything with '.@name.'!')
		}
	}

	msg(color(9).' -------')

	msg(color(7).'All time '.@name.' runs:')
	assign(@atr, get_value(@name.'.player.'.@player['id'].'.stats.alltime.runs.area'))
	if(@atr == '' || @atr == null, assign(@atr, 0))
	msg(color(6).'/reload area: '.color('b')._reloader_number_commaize(@atr).' runs')
	assign(@ttr, get_value(@name.'.player.'.@player['id'].'.stats.alltime.runs.tool'))
	if(@ttr == '' || @ttr == null, assign(@ttr, 0))
	msg(color(6).'/reload (tool): '.color('b')._reloader_number_commaize(@ttr).' runs')
	
	msg(color(9).' -------')

	assign(@fb, get_value(@name.'.player.'.@player['id'].'.stats.alltime.filled.blocks'))
	msg(color(7).'Total blocks filled: '.color('b')._reloader_number_commaize(@fb))
	
	msg(color(9).' -------')

	assign(@lr, get_value(@name.'.player.'.@player['id'].'.stats.last.run'))
	msg(color(7).'Last run: '.color(6).@lr['action'].'.')
	if(@lr['blocks'] == 1, assign(@p, 'block') assign(@p2, 'was'), assign(@p, 'blocks') assign(@p2, 'were'))
	msg(color('a')._reloader_number_commaize(@lr['blocks']).' '.@p.color(7).' '.@p2.' filled, using '.color(3)._reloader_number_commaize(@lr['filledqty']).' '.color(3).to_lower(@lr['item']).'.')

	msg(color(9).' -------')

	assign(@playeritems, get_value(@name.'.player.'.@player['id'].'.stats.alltime.items'))
	try(
		msg(color(9).'Total items used to fill blocks:')
		assign(@tiu, 0)
		assign(@j, 0)
		assign(@playeritemsi, array_keys(@playeritems))
		foreach(@playeritems, @currentvar,
				assign(@tiu, @tiu + @currentvar)
				assign(@item, _reloader_item_name(@playeritemsi[@j]))
				msg(color(3).@item['display'].': '.color(7)._reloader_number_commaize(@currentvar))
				assign(@j, @j + 1)
		)      
		msg(color(9).'Total items used: '._reloader_number_commaize(@tiu))
	,@fail,
		msg(color(7).'['.color(6).@name.color(7).'] '.color(7).'You haven\'t used '.@name.'!')
	)

	die(color(9).'['.color(7).@name.color(9).'] '.color(9).' -----')
# Bind/Unbind reload tool
case 'managebind':
case 'bind':
case 'unbind':
	assign(@index, null)
	#Find the tool in the players hand. Don't use just a hand, sorry.
	assign(@tool, pinv(@player['name'], @index)['name'])
	if(@tool == null) {
		#ReLoad tool does not bind to Hand.	
        die(color('c').'['.color(6).@name.color('c').'] '.color(7).'Your hands aren\'t that magical! Equip a tool and use \'/reloader\' again.')
	}
	assign(@tooldisplay, _reloader_item_name(@tool))
	assign(@tooldata, import(@name.'.player.'.@player['id'].'.tool.'.@tool))
	if(@dev == true) { msg(color(7).'[DEV] Tool to bind/unbind: '.color('f').@tool) }
	
	if(is_array(@tooldata)) {
		if(array_index_exists(@tooldata, 'use')) {
		# this tool has been used before
			if(@tooldata['use'] == true) {
			# Disable tool.
				@tooldata['use'] = false
				export(@name.'.player.'.@player['id'].'.tool.id.'.@tool, @tooldata)
				die(color(7).'['.color(6).@name.color(7).'] '.color(3).'Tool unbound from your '.color('a').@tooldisplay['display'].'.')
			} else {
		#Not enabled, but a tool has previously been setup
			# Enable tool.
				@tooldata['use'] = true
				export(@name.'.player.'.@player['id'].'.tool.id.'.@tool, @tooldata)
				die(color(7).'['.color(6).@name.color(7).'] '.color(3).'ReLoad tool re-bound to your '.color('a').@tooldisplay['display'].color(3).', utilizing previously used settings for this item.')	
			}	
		}
	} else {
		#no data found
		die(color('c').'['.color(6).@name.color('c').'] '.color(7).'This tool was not previously bound. You need to use \'/reloader\' to setup this tool for use!') 
	}
# All other actions that can't be acted upon right here are still listed in order to detect an unknown action later.
case 's':
case 'set':
case '-set':
case 'a':
case 'ar':
case 'area':
case '-area':
case '-a':
case 'fuel':
case 'this':
case 'that':
# A null action is supported, as tool does not specify an action
case '':
case null:
	if(@dev == true, msg(color(7).'[DEV] '.color('f').'passed info area'))
}

### Continuing on...

switch(@action) {
#Conflict: Since no action above was performed, we need to move the options into the correct order for the item and qty checks below.
# The order is already set for commands with actions, 
# but tool does not have an action yet still specifies item type and quantity.
# so actions get escaped in switch() here to allow the below checks to have the correct values to check for both area and tool mode. 
# Aliases for set & area action must be mentioned here too.
case 's':
case 'set':
case '-set':
case 'a':
case 'ar':
case 'area':
case '-area':
case '-a':
	if(@dev == true, msg(color(7).'[DEV] remap:'.color('f').'set or area'))
# Set Defaults for fuel 	
case 'fuel':
case 'f':
	if(@dev == true, msg(color(7).'[DEV] remap:'.color('f').'fuel'))
	assign(@defaultitem, @serveritemdefaults['fuel'])
	
### Continuing on... Tool usage:
# No more actions to perform, we are now using tool. Move options into proper places that checks expect values to be for tool usage.	
case 'this':
case 'that':
# 'this/that' action is handled later, but need item and qty remapped properly if tool used.
default:
	if(@dev == true, msg(color(7).'[DEV] remap:'.color('f').'tool'))
	assign(@option3, @option2)
	assign(@option2, @option1)
	assign(@option1, @action)
}

# Set defaults:
# No set item? We'll load the variable with the default item then.
assign(@isdefaultqty, '')
if(@setitem == '' || @setitem == null) {@setitem = @defaultitem}
# No set item quantity? We'll load the variable with the default qty then.
if(@setitemqty == '' || @setitemqty == null,
        assign(@setitemqty, @defaultitemqty)
        assign(@isdefaultqty, true)
)

 
# Override set settings:
# Did you use the 'that' acronym for item being held?
switch(@option1) {
case 'this':
case 'that':
#item - onhand tool
	if(pinv(@player['name'], null) == null) {
	#slot empty - is hand. use defaults.
        assign(@option1, @defaultitem)
	} else {
	#use equipped item 
		assign(@option1, pinv(@player['name'], null)['name'])
	}
	assign(@option2, max_stack_size(array(name: @option1, 'meta': null)))
	if(@dev == true, msg(color(7).'[DEV] that item/qty:'.color('f').@option1.' '.@option2))
}
# Are you specifying the item type?
assign(@item, @option1)
if(@item == '' || @item == null) { @item = @setitem }

# Are you specifying the quantity?
assign(@itemqty, @option2)
if(@itemqty == 0) {die(color('c').'['.color(6).@name.color('c').'] '.color(7).'You need to specify your quantity in a positive number.')}
if(@itemqty == '' || @itemqty == null) {
	assign(@itemqty, @setitemqty)
} else {
	assign(@isdefaultqty, false)
}
if(!is_integral(@itemqty)) {die(color('c').'['.color(6).@name.color('c').'] '.color(7).'You need to specify your quantity in a number.')}
 
#Did you say default?
switch(@option1){
case '-':
case 'remove':
case 'default':
case 'clear':
	@item = @defaultitem
	@itemqty = @defaultitemqty
}

 
# Check: Did you specify a item name or ID?
# We need to translate the item given into the proper Item Name.
#Perform Name / ID checks.
@itemids = _reloader_item_name(@item)
@item = @itemids['name']
@itemname = @itemids['name']

# Check: Null.
# WARNING: If data_name comes up with null, this probably indicates a unsupported, non-vanilla item.
# In setting items CH doesn't care if the item actually exists, it will just set the container full
# of what it was told to set it to.
# If a client tries to view this non-existent item: Instant client crash.
# (and the server might report that a entity ID has invalid items)
if(@item == null || @item == '') {
	msg(color('c').'['.color(6).@name.color('c').'] '.color(7).'That item isn\'t supported!')
	_reloader_msgAdmins(color('c').'['.color(6).@name.color('c').'] '.color('c').@player['display'].' tried to use a non-vanilla item in '.@name.'! '.color(7).'Only vanilla items are supported!', color('c').'['.color(6).@name.color('c').'] '.color('c').@player['display'].' tried to use a non-vanilla item in '.@name.'! '.color(7).'Only vanilla items are supported!', ' Note: If you are running a modded server, you will need to notify CommandHelper of the data names for blocks/items that mods add. Ask on CommandHelper\'s IRC channel for help in doing this.', true)
	die()
}
 
# Check: Is this air?
if(@item == '0' || string_contains_ic(@item, 'air')) {
        die(color('c').'['.color(6).@name.color('c').'] '.color(7).'You cannot use air!')
} 
 
# Check: Item permissions
if(@defaultitem != @item) {
	if(_reloader_check_perm(@player['name'], 'item', @item) == false) {
		die(color('c').'['.color(6).@name.color('c').'] '.color(7).'You do not have permissions to use this item type. ('.@itemids['display'].')')
	}
}
 
# Check: Legitimate quantity stacks
assign(@itemstacksize, max_stack_size(array(name: @item, 'meta': null)))
if(@dev == true) {msg(color(7).'[DEV] max_stack_size for '.color('f').@item.': '.@itemstacksize)}

if(@isdefaultqty == true) {
	# This is the default quantity, the player hasn't set any different quantity.
	if(@dev == true) {msg(color(7).'[DEV] default qty: '.color('f').@itemqty)}
	# Bump down the quantity according to the max stack size.
	if(@itemqty > @itemstacksize) {
		@itemqty = @itemstacksize
	}
} else {
#Not using the default qty
	if(has_permission(@player['name'], 'commandhelper.alias.reloader.stack.illegitimate')) {
		if(@dev == true && @itemqty > @itemstacksize) { 
			msg(color(7).'[DEV] stack: '.color('f').'Using illegitimate stack perm')
		} else {
			msg(color(7).'[DEV] stack: '.color('f').'legit')
		}
	} else {
		# perm check returns nope.
		if(@itemqty > @itemstacksize) {
			die(color('c').'['.color(6).@name.color('c').'] '.color(7).'You do not have permissions to make an illegitimate stack!')
		}
	}
}
 
if(@dev == true) {msg(color(7).'[DEV] Final item & quantity: '.color('f').@item.' ('.@itemqty.')')}
### More actions:
 
# Set the item type to automatically use on /reloader
switch(@action) {
case 's':
case 'set':
case '-set':
@msg1 = ''
	switch(@option1) {
	# at this point option1 is item id
	case '-':
	case 'remove':
	case 'default':
	case 'clear':
		clear_value(@name.'.player.'.@player['id'].'.set.item.type')
		clear_value(@name.'.player.'.@player['id'].'.set.item.qty')
		clear_value(@name.'.player.'.@player['id'].'.set.item.type.fuel')
		die(color(7).'['.color(6).@name.color(7).'] '.color(3).'Your previously set item, quantity, and fuel item has been cleared!')
	default:
		if(@fuel == true) {
			@setitem = get_value(@name.'.player.'.@player['id'].'.set.item.type.fuel')
			if(@setitem == '' || @setitem == null) { @setitem = @serveritemdefaults['fuel'] }
			store_value(@name.'.player.'.@player['id'].'.set.item.type.fuel', @item)
			@msg1 = 'Fuel '
		} else {
			store_value(@name.'.player.'.@player['id'].'.set.item.type', @item)
			store_value(@name.'.player.'.@player['id'].'.set.item.qty', @itemqty)
		}
		die(color(7).'['.color(6).@name.color(7).'] '.color(3).'Your previously set '.@msg1.'item was: '.color(7).@setitem.' (Quantity: '.@setitemqty.')'.color(3).', and is now: '.color('a').@itemids['display'].' (Quantity: '.@itemqty.')')
	}
}
 
### Continuing on to filling the block inventories! 
 
# Store the item last used:
store_value(@name.'.player.'.@player['id'].'.last.item', @item)
store_value(@name.'.player.'.@player['id'].'.last.qty', @itemqty)
# Randomizer - area 
assign(@random, false)

### Fill an area
switch(@action) {
case 'a':
case 'ar':
case 'area':
case '-area':
case '-a':
	if(has_permission(@player['name'], 'commandhelper.alias.reloader.area')) {
		assign(@world, pworld(@player['name']))
		# Area mode requires an extension to access WorldEdit selection data.
		if(extension_exists('SKCompat') == true || extension_exists('CHWorldEdit') == true) { @extok = true } else { @extok = false }
		include('includes.library/reload-functions-Area-'.@extok.'.ms')

	  # Get the player's area mode
		assign(@areamode, get_value(@name.'.player.'.@player['id'].'.area.mode'))
		if(@areamode == '' || @areamode == null) {@areamode = 'ALL'}
		#Area mode message display
		switch(to_upper(@areamode)) {
		case 'ALL':
			@areamodedisplay = 'Items'
		case 'BREWING':
			@areamodedisplay = 'Brewing Stand'
		case 'GROUP_CHEST':
		case 'CHESTS':
			@areamodedisplay = 'Chests'
		case 'GROUP_FURNACE':
		case 'FURNACES':
			@areamodedisplay = 'Furnaces'
		default:
			if(reg_count('_', @areamode) > 0) {
				@areamodedisplay = to_lower(reg_replace('_', ' ', @areamode))
			} else {
				@areamodedisplay = to_lower(@areamode)
			}
		}

		# Setup proc to use if random mode is enabled
		if(@random == true) {
			assign(@areaprocname, '_reloader_random')
		} else {
			assign(@areaprocname, '_reloader_fill')
		}
		
		# It is now time to iterate through the area. Assigned a variable to get stats returned.
		assign(@filled, _reloader_iterate_cuboid(@areaprocname, @world, @item, @player['name'], @itemqty, @fuel, @verbose))
		
		if(@filled['fail'] == true) {die(@filled['failmsg'])}
		# Enumerate returned array into one output string to message
		assign(@ftkeys, array_keys(@filled['type']))
		assign(@filledinfo, '')
		for(assign(@i, 0), @i < array_size(@filled['type']), @i++) {
			if(@filled['type'][@ftkeys[@i]] > 0) {
				if(reg_count('_', @ftkeys[@i]) > 0) {
					@ftdisplay = _reloader_capitalize(reg_replace('_', ' ', @ftkeys[@i]))
				} else {
					@ftdisplay = _reloader_capitalize(@ftkeys[@i])
				}
				if(_is_even_number(@i) == true) {		
					@color = '9'
				} else {
					@color = '7'
				}
				@filledinfo = @filledinfo.color(@color).@ftdisplay.': '.@filled['type'][@ftkeys[@i]].' '
			}
		}
		if(@filled['blocks'] > 1) {
			assign(@donemsg, @filled['blocks'].' '._reloader_capitalize(@areamodedisplay).' were filled, using a total of '.color('a')._reloader_number_commaize(@filled['items']).' '.@itemids['display'].'!')
			@dmcolor = 'a'
		} else {
			assign(@donemsg, '1 '._reloader_capitalize(@areamodedisplay).' was filled with '.color('a').@filled['items'].' '.@itemids['display'].'!')
			@dmcolor = 'a'
		}
		# Nothing was filled? why?
		if(@filled['blocks'] == 0) {
			@dmcolor = '8'
			if(@filled['found'] > 0) {
				# Acceptable block entities were found but not touched due to inventory full.
				assign(@donemsg, 'Any '.@areamodedisplay.'(s) in the area were already full.')
			} else {
				# Acceptable block entities were not found.
				assign(@donemsg, 'There wasn\'t any '.@areamodedisplay.'(s) to fill in the area!')
			}
		}
		msg(color(@dmcolor).'['.color(6).@name.color(@dmcolor).'] '.color(3).@donemsg)
		if(@verbose == true && @filled['blocks'] > 0) { msg(color(7).@filledinfo) }
#permission
	} else {
		msg(color('c').'['.color(6).@name.color('c').'] '.color(7).'You do not have permission to fill an area!')
	}
#end of switch	
        die()
}
 
### ReLoad tool
assign(@index, null)
#Find the tool in the players hand. Don't use just a hand, sorry.
assign(@tool, pinv(@player['name'], @index))
if(@tool == null || !is_array(@tool)) {
        die(color('c').'['.color(6).@name.color('c').'] '.color(7).'Your hands aren\'t that magical! Equip a tool and use \'/reloader\' again.')
}
if(@dev == true,
        msg(color(7).'[DEV] Tool to bind: '.color('f').@tool['name'])
)
assign(@tooldisplay, _reloader_item_name(@tool['name']))
assign(@toolcheck, import(@name.'.player.'.@player['id'].'.tool.id.'.@tool['name']))

# If existing tool, Disable tool.
if(is_array(@toolcheck)) {
	if(array_index_exists(@toolcheck, 'use')) {
		#this tool has been used before
		if(@toolcheck['use'] == true) {
		# Disable tool.
			@toolcheck['use'] = false
			export(@name.'.player.'.@player['id'].'.tool.id.'.@tool['name'], @toolcheck)
			die(color(7).'['.color(6).@name.color(7).'] '.color(3).'Tool unbound from your '.color('a').@tooldisplay['display'].'.')
		}
	}
}
# else, continue to enable tool.
@tooldata = array(use: true, fuel: false, qty: @itemqty, item: @item)
### Tool fuel: Fill furnace fuel, not the top of it.
if(@action == 'fuel') {
	@fuel = true
	@tooldata['fuel'] = true
}
#done
export(@name.'.player.'.@player['id'].'.tool.id.'.@tool['name'], @tooldata)
assign(@fuelmsg, '')
if(@fuel == true) {
		@fuelmsg = 'Furnace'
} else {
		@fuelmsg = 'Chest, Dispenser, or Furnace'
}
msg(color(7).'['.color(6).@name.color(7).'] '.color(3).'Tool bound to '.@tooldisplay['display'].'. Left-click a '.@fuelmsg.' to fill it with '.@itemids['display'].'.')
<<<