######################################################
#
#   ReLoad: Fill chests or dispensers in one click!
#   version 1.1-tmc
#
######################################################
#test layout:/rl      area       fuel       263         64
reloader:/reloader [$action] [$option1] [$option2] [$option3] [$option4] [$] = >>>
#Include required backend functions
include('includes.library/reload-functions-Core.ms')
### What is the name of this script?
assign(@name, string(import('dispenserreloader.name')))
 
### Get server item defaults
@serveritemdefaults = _reloader_get_server_defaults()
@defaultitem = @serveritemdefaults['item']
@defaultitemqty = @serveritemdefaults['qty']
 
### Other dynamic vars, don't edit
assign(@action, to_lower($action))
assign(@option1, $option1)
assign(@option2, $option2)
assign(@option3, $option3)
assign(@option4, $option4)
assign(@player, _reloader_getplayerID(player()))
assign(@verbose, get_value(@name.'.player.'.@player['id'].'.verbose'))
#For other parts of the script, we'll use this value to enable/disable verbose messages.
export(@name.'.player.'.@player['id'].'.verbose', @verbose)
assign(@dev, import('ch.player.'.@player['id'].'.developer'))

/* 
set_uncaught_exception_handler(closure(@ex){
	msg(color('c').'['.color(6).@name.color('c').'] '.color(7).'An error has occured.')
	msg(@ex)
	console(color('c').@ex['classType'].'! '.color(7).@ex['message'])
	console(color(1).'Path: '.@ex['file'].color(7).' Line #: '.color('a').@ex['line'].'.'.@ex['col'])
	return(true)
})
*/

### Action list help
proc _reloader_help() {
	assign(@name, import('dispenserreloader.name'))
	msg(color(3).'DispenserReLoader: Fill chests or dispensers in one click!')
	msg(color(6).'- Help:')
	msg(color('a').'Command usage: action <required> [optional]')
	msg(color(6).'- Information:')
	msg(color(7).'/reloader help'.color(4).' - '.color('f').'Shows this help screen.')
	msg(color(7).'/reloader info'.color(4).' - '.color('f').'Shows your settings, such as the currently set item, or extra messages.')
	msg(color(7).'/reloader stats'.color(4).' - '.color('f').'Shows your statistics for '.@name.', such as the total area or tool runs, total blocks filled, total items used, etc.')
	msg(color(7).'/reloader verbose'.color(4).' - '.color('f').'Allows you to turn on or off extra messages '.@name.' can display.')
	msg(color(6).'- Actions:')
	msg(color(7).'Most commands support specifying the item type and quantity to use, or you can use "/reloader set" to always use a specific item without having to type it each time.')
	msg(color(7).'/reloader [item] [qty]'.color(4).' - '.color('f').'Binds the tool you are holding to fill any chest, dispenser, or furnace block with the specified item (defaults to arrows).')
	msg(color(7).'/reloader set <item> [qty]'.color(4).' - '.color('f').'Allows you to set what item type and quantity you would like to automatically use when you just type \'/reloader\'. Use "default" as your item type to reset to defaults.')
	msg(color(7).'/reloader area [item] [qty]'.color(4).' - '.color('f').'This uses your WorldEdit selection to fill every fillable block in the selection with the specified item (defaults to arrows). Useful for walls of death.')
	msg(color(7).'/reloader area fuel [item] [qty]'.color(4).' - '.color('f').'This uses your WorldEdit selection to fill every furnace\'s fuel in the selection with the specified item.')
	msg(color(7).'/reloader fuel [item] [qty]'.color(4).' - '.color('f').'This binds your tool to fill the fuel portion of a furnace, instead of filling the block to burn.')
	msg(color(7).'/reloader mode <itemtype>'.color(4).' - '.color('f').'Sets /reloader area to only fill a chest, dispenser, or furnace, or all 3 types. Useful for not wiping chest contents ;)')
	msg(color(7).'/reloader managebind'.color(4).' - '.color('f').'Unbind, or re-bind the '.@name.' tool to your currently held item!')
}
 
 
 
#fix: move reassign options to  before tool part.
#make /cmd $action $op1 $op2 $op3
#all action expect /cmd ACTION op1 op2 op3
# tool only ever expects /cmd op1 op2 op3
#this way a list of actions is not needed in order to reassign options to correct order.
#at tool reassign to (if != fuel) $action = @op1 etc, move 1 up.

# More option conflicts:
# /reloader area fuel needs option variable conversions, due to the extra action command.
assign(@fuel, '')
switch(@action) {
case 'a':
case 'area':
	if(@option1 == 'fuel',
		#item type = @option1
		assign(@option1, @option2)
		#item quantity = @option2
		assign(@option2, @option3)
		assign(@fuel, true)
	)
}
 
# Setup previously set item type and quantity
assign(@setitem, get_value(@name.'.player.'.@player['id'].'.set.item.type'))
assign(@setitemqty, get_value(@name.'.player.'.@player['id'].'.set.item.qty'))
# Check: verify item name and qty is legit
if(_reloader_item_name(@setitem)['name'] == null) {
	assign(@setitem, 3)
	clear_value(@name.'.player.'.@player['id'].'.set.item.type')
	if(@dev == true, msg(color(7).'[DEV]: '.color('f').'Set item type was not valid, reset to dirt.'))
}
if(!is_integral(@setitemqty) || @setitemqty == 0) {
	assign(@setitemqty, 3)
	clear_value(@name.'.player.'.@player['id'].'.set.item.qty')
	if(@dev == true, msg(color(7).'[DEV]: '.color('f').'Set item qty was not valid, reset to 3.'))
}
 
### These actions don't need the main parts of the script / the main checks to run, so they are listed here.

switch(@action){

case 'help':
case '-help':
case '?':
case '/?':
	_reloader_help()
	die()

# Version check
case 'version':
case 'build':
case '-version':
case '-build':
	msg(color(7).'['.color(6).@name.color(7).'] '.color(3).'Version: '.import('dispenserreloader.version'))
	die()

# Extra messages
case '-verbose':
case 'verbose':
	assign(@verbosesetting, get_value(@name.'.player.'.@player['id'].'.verbose'))
	if(@verbosesetting == true,
		#disable
	        store_value(@name.'.player.'.@player['id'].'.verbose', false)
	        export(@name.'.player.'.@player['id'].'.verbose', false)
		die(color(7).'['.color(6).@name.color(7).'] '.color(3).'Extra messages are '.color('c').'disabled! '.color(7).@name.' will display only normal messages')
	,
		#enable
	        store_value(@name.'.player.'.@player['id'].'.verbose', true)
	        export(@name.'.player.'.@player['id'].'.verbose', true)
		die(color(7).'['.color(6).@name.color(7).'] '.color(3).'Extra messages are '.color('a').'enabled! '.color(7).@name.' will display more useful messages.')
	)
	die()
 
#set which item type to fill on /reloader area
case '-mode':
case 'mode':
case 'setmode':
case 'areamode':
	assign(@msg, '')
	#nothing...
	if(@option1 == '' || @option1 == null,
		assign(@areamode, get_value(@name.'.player.'.@player['id'].'.area.mode'))
		if(@areamode == '' || @areamode == null,
				assign(@areamode, All)
		)
		msg(color(7).'['.color(6).@name.color(7).'] '.color(3).' Current Area mode: '.color(7).@areamode)
		die(color('c').'['.color(6).@name.color('c').'] '.color(7).'You need to specify a type of item to fill. Accepted item types are chests, dispensers, and furnaces, or use "all" to use all 3 types.')
	)
	switch(to_lower(@option1)) {
	case 'a':
	case 'all':
	case 'default':
                store_value(@name.'.player.'.@player['id'].'.area.mode', 'All')
                assign(@msg, 'All')
        
    case 'c':
	case 'ch':
	case 'chest':
                store_value(@name.'.player.'.@player['id'].'.area.mode', 'Chest')
                assign(@msg, 'Chest')
	case 'd':
	case 'dis':
	case 'dispenser':
                store_value(@name.'.player.'.@player['id'].'.area.mode', 'Dispenser')
                assign(@msg, 'Dispenser')
	case 'f':
	case 'fur':
	case 'furnace':
                store_value(@name.'.player.'.@player['id'].'.area.mode', 'Furnace')
                assign(@msg, 'Furnace')
	default:
		die(color('c').'['.color(6).@name.color('c').'] '.color(7).'You need to specify a VALID type of item to fill. Accepted item types are chests, dispensers, and furnaces, or use "all" to use all 3 types.')
	}
	msg(color(7).'['.color(6).@name.color(7).'] '.color(3).'Area mode set to: '.@msg)
	die()

# Information, such as the last item used, set modes, etc.
case 'info':
case '-i':
case '-info':
        assign(@lastitemused, _reloader_item_name(get_value(@name.'.player.'.@player['id'].'.last.item')))
        assign(@lastitemqty, get_value(@name.'.player.'.@player['id'].'.last.qty'))
        assign(@areamode, get_value(@name.'.player.'.@player['id'].'.area.mode'))
        if(@areamode == '' || @areamode == null,
                assign(@areamode, All)
        )
        if(@setitem == '' || @setitem == null,
                assign(@setitemmsg, color(7).'Unset')
        ,
                assign(@setitemmsg, color(2).@setitem.color(9).'(Qty: '.@setitemqty.')')
        )      
        if(@verbose == true,
                assign(@vmsg, color('a').'Enabled')
                ,
                assign(@vmsg, color('c').'Disabled')
        )
        msg(color(7).'['.color(6).@name.color(7).'] '.color(6).@name.' settings information for: '.color('a').@player['display'])
        msg(color(7).'['.color(6).@name.color(7).'] '.color(3).'Set item: '.color('a').@setitemmsg)
        msg(color(7).'['.color(6).@name.color(7).'] '.color(3).'Last item used: '.color(7).@lastitemused['display'].' ['.@lastitemused['id'].'] '.color(9).'(Qty: '.@lastitemqty.')')
        msg(color(7).'['.color(6).@name.color(7).'] '.color(3).'Area mode: '.color(7).@areamode)
        msg(color(7).'['.color(6).@name.color(7).'] '.color(3).'Verbose (extra) messages: '.@vmsg)
        die()

#Statistics: How many arrows have you used?
case '-stats':
case 'stats':
case 'statistics':
case 'stat':
case 'st':
        msg(color(7).'['.color(6).@name.color(7).'] '.color(7).@name.' stats for: '.color(9).@player['display'])     
        assign(@atr, get_value(@name.'.player.'.@player['id'].'.stats.alltime.runs.area'))
        assign(@ttr, get_value(@name.'.player.'.@player['id'].'.stats.alltime.runs.tool'))
        # Stop with 0/null stuff if the player hasn't actually done anything.
        if(@atr == '' || @atr == null,
                if(@ttr == '' || @ttr == null,
                        die(color('c').'['.color(7).@name.color('c').'] '.color('c').'You haven\'t done anything with '.@name.'!')
                )
        )
 
        msg(color(9).' -------')
 
        msg(color(7).'All time '.@name.' runs:')
        assign(@atr, get_value(@name.'.player.'.@player['id'].'.stats.alltime.runs.area'))
        if(@atr == '' || @atr == null, assign(@atr, 0))
        msg(color(6).'/reload area: '.color('b')._number_commaize(@atr).' runs')
        assign(@ttr, get_value(@name.'.player.'.@player['id'].'.stats.alltime.runs.tool'))
        if(@ttr == '' || @ttr == null, assign(@ttr, 0))
        msg(color(6).'/reload (tool): '.color('b')._number_commaize(@ttr).' runs')
        
		msg(color(9).' -------')
 
        assign(@fb, get_value(@name.'.player.'.@player['id'].'.stats.alltime.filled.blocks'))
        msg(color(7).'Total blocks filled: '.color('b')._number_commaize(@fb))
        
		msg(color(9).' -------')
 
        assign(@lr, get_value(@name.'.player.'.@player['id'].'.stats.last.run'))
        msg(color(7).'Last run: '.color(6).@lr['action'].'.')
        if(@lr['blocks'] == 1, assign(@p, block) assign(@p2, was), assign(@p, blocks) assign(@p2, were))
		msg(color('a')._number_commaize(@lr['blocks']).' '.@p.color(7).' '.@p2.' filled, using '.color(3)._number_commaize(@lr['filledqty']).' '.color(3).to_lower(@lr['item']).'.')
 
        msg(color(9).' -------')
 
        assign(@playeritems, get_value(@name.'.player.'.@player['id'].'.stats.alltime.items'))
        try(
                msg(color(9).'Total items used to fill blocks:')
                assign(@tiu, 0)
                assign(@j, 0)
                assign(@playeritemsi, array_keys(@playeritems))
                foreach(@playeritems, @currentvar,
                        assign(@tiu, @tiu + @currentvar)
                        assign(@item, _reloader_item_name(@playeritemsi[@j]))
                        msg(color(3).@item['display'].': '.color(7)._number_commaize(@currentvar))
                        assign(@j, @j + 1)
                )      
                msg(color(9).'Total items used: '._number_commaize(@tiu))
        ,@fail,
                msg(color(7).'['.color(6).@name.color(7).'] '.color(7).'You haven\'t used '.@name.'!')
        )
 
        msg(color(9).'['.color(7).@name.color(9).'] '.color(9).' -----')
 
        die()

#Bind/Unbind reload tool
case 'managebind':
case 'bind':
case 'unbind':
	assign(@index, null)
	#Find the tool in the players hand. Don't use just a hand, sorry.
	assign(@tool, pinv(@player['name'], @index)['name'])
	if(@tool == null) {
		#ReLoad tool does not bind to Hand.	
        die(color('c').'['.color(6).@name.color('c').'] '.color(7).'Your hands aren\'t that magical! Equip a tool and use \'/reloader\' again.')
	}
	assign(@tooldisplay, _reloader_item_name(@tool))
	assign(@tooldata, import(@name.'.player.'.@player['id'].'.tool.'.@tool))
	if(@dev == true) {
		msg(color(7).'[DEV] Tool to bind/unbind: '.color('f').@tool)
	}
	
	if(is_array(@tooldata)) {
		if(array_index_exists(@tooldata, 'use')) {
		# this tool has been used before
			if(@tooldata['use'] == true) {
			# Disable tool.
				@tooldata['use'] = false
				export(@name.'.player.'.@player['id'].'.tool.id.'.@tool, @tooldata)
				die(color(7).'['.color(6).@name.color(7).'] '.color(3).'Tool unbound from your '.color('a').@tooldisplay['display'].'.')
			} else {
		#Not enabled, but a tool has previously been setup
			# Enable tool.
				@tooldata['use'] = true
				export(@name.'.player.'.@player['id'].'.tool.id.'.@tool, @tooldata)
				die(color(7).'['.color(6).@name.color(7).'] '.color(3).'ReLoad tool re-bound to your '.color('a').@tooldisplay['display'].color(3).', utilizing previously used settings for this item.')	
			}	
		}
	} else {
		#no data found
		die(color('c').'['.color(6).@name.color('c').'] '.color(7).'This tool was not previously bound. You need to use \'/reloader\' to setup this tool for use!') 
	}
}

### Continuing on...

switch(@action) {
#Conflict: Since no action above was performed, we need to move the options into the correct order for the item and qty checks below,
# as tool does not have an action but still specifies item type and quantity.
#However 'set' and 'area' actions need these checks to run and pass,
# so those actions get escaped in switch() here to allow the below checks to have the correct values to check for both area and tool mode. 
# Aliases for set & area action must be mentioned here too.
case 's':
case 'set':
case '-set':
case 'a':
case 'ar':
case 'area':
case '-area':
case '-a':
	if(@dev == true, msg(color(7).'[DEV] remap:'.color('f').'set or area'))
### Continuing on...
# Set Defaults for fuel 	
case 'fuel':
	if(@dev == true, msg(color(7).'[DEV] remap:'.color('f').'fuel'))
	assign(@defaultitem, @serveritemdefaults['fuel'])
case 'this':
case 'that':
#item - onhand tool
	if(pinv(@player['name'], null) == null) {
        assign(@option1, @defaultitem)
	} else {
	#use equipped item 
		assign(@option1, pinv(@player['name'], null)['name'])
	}
	assign(@option2, max_stack_size(array(name: @option1, 'meta': null)))
	if(@dev == true, msg(color(7).'[DEV] remap:'.color('f').' equipped: '.@option1.@option2))
default:
	# No more actions to perform, using tool. Move options into proper places that checks expect values to be for tool usage.
	if(@dev == true, msg(color(7).'[DEV] remap:'.color('f').'tool'))
	assign(@option3, @option2)
	assign(@option2, @option1)
	assign(@option1, @action)
}

# Set defaults:
# No set item? We'll load the variable with the default item then.
assign(@isdefaultqty, '')
if(@setitem == '' || @setitem == null, assign(@setitem, @defaultitem))
# No set item quantity? We'll load the variable with the default qty then.
if(@setitemqty == '' || @setitemqty == null,
        assign(@setitemqty, @defaultitemqty)
        assign(@isdefaultqty, true)
)
 
# Override set settings:
# Are you specifying the item type?
assign(@item, @option1)
if(@item == '' || @item == null,
        assign(@item, @setitem)
)
# Are you specifying the quantity?
assign(@itemqty, @option2)
if(@itemqty == 0,
        die(color('c').'['.color(6).@name.color('c').'] '.color(7).'You need to specify your quantity in a positive number.')
)
if(@itemqty == '' || @itemqty == null,
        assign(@itemqty, @setitemqty)
        ,
        assign(@isdefaultqty, false)
)
if(is_integral(@itemqty), null,
        die(color('c').'['.color(6).@name.color('c').'] '.color(7).'You need to specify your quantity in a number.')
)
 
#Did you say default?
switch(@option1){
case '-':
case 'remove':
case 'default':
case 'clear':
	assign(@item, @defaultitem)
	assign(@itemqty, @defaultitemqty)
}

 
# Check: Did you specify a item name or ID?
# We need to translate the item given into the proper Item Name.
#Perform Name / ID checks.
@itemids = _reloader_item_name(@item)
@item = @itemids['name']
@itemname = @itemids['name']

# Check: Is this air?
if(@item == '0' || string_contains_ic(@item, 'air')) {
        die(color('c').'['.color(6).@name.color('c').'] '.color(7).'You cannot use air!')
}
 
# Check: Null.
# WARNING: If data_name comes up with null, this probably indicates a unsupported, non-vanilla item.
# In setting items CH doesn't care if the item actually exists, it will just set the container full
# of what it was told to set it to.
# If a client tries to view this non-existent item: Instant client crash.
# (and the server might report that a entity ID has invalid items)
if(@item == null || @item == '',
        msg(color('c').'['.color(6).@name.color('c').'] '.color(7).'That item isn\'t supported!')
        _reloader_msgAdmins(color('c').'['.color(6).@name.color('c').'] '.color('c').@player['display'].' tried to use a non-vanilla item in '.@name.'! '.color(7).'Only vanilla items are supported!', color('c').'['.color(6).@name.color('c').'] '.color('c').@player['display'].' tried to use a non-vanilla item in '.@name.'! '.color(7).'Only vanilla items are supported!', ' Note: If you are running a modded server, you will need to notify CommandHelper of the data names for blocks/items that mods add. Ask on CommandHelper\'s IRC channel for help in doing this.', true)
        die()
)
 
# Check: Item permissions
if(@defaultitem != @item,
	if(@dev == true,
		msg(color(7).'[DEV] Not default item: '.color('f').@defaultitem.' != '.@item)
	)
	if(has_permission(@player['name'], 'commandhelper.alias.reloader.any.item.use'), if(@dev == true, msg(color(7).'[DEV] item: '.color('f').'Using any perm')),
		if(has_permission(@player['name'], 'commandhelper.alias.reloader.use.'.@item), if(@dev == true, msg(color(7).'[DEV] item: '.color('f').'Using item perm')),
			die(color('c').'['.color(6).@name.color('c').'] '.color(7).'You do not have permissions to use this item type. ('.@itemids['display'].')')
		)
	)
)
 
# Check: Legitimate quantity stacks
assign(@itemstacksize, max_stack_size(array(name: @item, 'meta': null)))
if(@dev == true,
        msg(color(7).'[DEV] max_stack_size for '.color('f').@item.': '.@itemstacksize)
)
if(@isdefaultqty == true,
	# This is the default quantity, the player hasn't set any different quantity.
	if(@dev == true,
			msg(color(7).'[DEV] default qty: '.color('f').@itemqty)
	)
	# Bump down the quantity according to the max stack size.
	if(@itemqty > @itemstacksize,
			assign(@itemqty, @itemstacksize)
	)
	,
#Not using the default qty
	if(has_permission(@player['name'], 'commandhelper.alias.reloader.stack.illegitimate'),
			if(@dev == true && @itemqty > @itemstacksize, 
		msg(color(7).'[DEV] stack: '.color('f').'Using illegitimate stack perm')
		,
		msg(color(7).'[DEV] stack: '.color('f').'legit')
	)
	,
		# perm check returns nope.
		if(@itemqty > @itemstacksize,
				die(color('c').'['.color(6).@name.color('c').'] '.color(7).'You do not have permissions to make an illegitimate stack!')
		)
	)
)
 
#Quick Dev message...
if(@dev == true, msg(color(7).'[DEV] Final item & quantity: '.color('f').@item.' ('.@itemqty.')'))

 
### More actions:
 
# Set the item type to automatically use on /reloader
switch(@action) {
case 's':
case 'set':
case '-set':
	store_value(@name.'.player.'.@player['id'].'.set.item.type', @item)
	store_value(@name.'.player.'.@player['id'].'.set.item.qty', @itemqty)
	switch(@option1) {
	case '-':
	case 'remove':
	case 'default':
	case 'clear':
		clear_value(@name.'.player.'.@player['id'].'.set.item.type')
		clear_value(@name.'.player.'.@player['id'].'.set.item.qty')
	}
        msg(color(7).'['.color(6).@name.color(7).'] '.color(3).'Your previously set item was: '.color(7).@setitem.' (Quantity: '.@setitemqty.')'.color(3).', and is now: '.color('a').@itemids['display'].' (Quantity: '.@itemqty.')')
        die()
}
 
### Continuing on to filling the block inventories! 
 
# Store the item last used:
store_value(@name.'.player.'.@player['id'].'.last.item', @item)
store_value(@name.'.player.'.@player['id'].'.last.qty', @itemqty)
 
 
# Randomizer - area 
#temp override
assign(@random, false)

### Fill an area
switch(@action) {
case 'a':
case 'ar':
case 'area':
case '-area':
case '-a':
	assign(@fl, '\n')
	if(has_permission(@player['name'], 'commandhelper.alias.reloader.area')) {
		assign(@world, pworld(@player['name']))
		# Area mode requires a extension to access WorldEdit selection data. Checking if extension is installed.
		assign(@extok, '')
		if(extension_exists('SKCompat')) {
			@extok = true
		} else {
			@extok = false
		}
		include('includes.library/reload-functions-SKCompat-'.@extok.'.ms')

	  # Get the player's area mode
		assign(@areamode, get_value(@name.'.player.'.@player['id'].'.area.mode'))
		if(@areamode == '' || @areamode == null,
			assign(@areamode, 'ALL')
		)
		if(@areamode == 'ALL') {
			@areamodedisplay = 'Chests, Dispensers, Furnaces'
		} else {
			@areamodedisplay = to_lower(@areamode)
		}

		# Setup proc to use if random mode is enabled
		if(@random == true) {
			assign(@areaprocname, _reloader_random)
		} else {
			assign(@areaprocname, _reloader_fill)
		}
		
		#It is now time to iterate through the area. Assigned a variable to get stats returned.
		assign(@filled, _reloader_iterate_cuboid(@areaprocname, @world, @item, @player['name'], @itemqty, @fuel, @verbose))
		
		if(@filled['fail'] == true,
			die(@filled['failmsg'])
		)
		assign(@filledinfoc, '')
		assign(@filledinfod, '')
		assign(@filledinfof, '')
		if(@filled['type']['chest'] == 0, null, assign(@filledinfoc, 'Chests filled: '.@filled['type']['chest'].' '))
		if(@filled['type']['dispenser'] == 0, null, assign(@filledinfod, 'Dispensers filled: '.@filled['type']['dispenser'].' '))
		if(@filled['type']['furnace'] == 0, null, if(@fuel == true, null, assign(@filledinfof, 'Furnaces filled: '.@filled['type']['furnace'])))
		if(@fuel == true) {
			assign(@b, 'Furnace')
		} else {
			assign(@b, 'block')
		}
		if(@filled['blocks'] > 1) {
			assign(@donemsg, 'Success! '.@filled['blocks'].' '.@b.'s were filled, using a total of '._number_commaize(@filled['items']).' '.@itemids['display'].'.'.@fl.color(7).@filledinfoc.@filledinfod.@filledinfof)
		} else {
			assign(@donemsg, 'Success! 1 '.@b.' was filled with '.@filled['items'].' '.@itemids['display'].'.'.@fl.color(7).@filledinfoc.@filledinfod.@filledinfof)
			if(@filled['blocks'] == 0) {
			# nothing was filled, why?
				if(@filled['found'] > 0) {
					# Acceptable block entities were found but not touched due to inventory full.
					assign(@donemsg, 'Any '.@areamodedisplay.'(s) in the area were already full!')
				} else {
					# Acceptable block entities were not found.
					assign(@donemsg, 'There wasn\'t any '.@areamodedisplay.'(s) to fill in the area!')
				}
			}
		}
		msg(color(7).'['.color(6).@name.color(7).'] '.color(3).@donemsg)
#permission
	} else {
		msg(color('c').'['.color(6).@name.color('c').'] '.color(7).'You do not have permission to fill an area!')
	}
#end of switch	
        die()
}
 
 
### ReLoad tool
assign(@index, null)
#Find the tool in the players hand. Don't use just a hand, sorry.
assign(@tool, pinv(@player['name'], @index))
if(@tool == null || !is_array(@tool)) {
        die(color('c').'['.color(6).@name.color('c').'] '.color(7).'Your hands aren\'t that magical! Equip a tool and use \'/reloader\' again.')
}
if(@dev == true,
        msg(color(7).'[DEV] Tool to bind: '.color('f').@tool['name'])
)
assign(@tooldisplay, _reloader_item_name(@tool['name']))
assign(@toolcheck, import(@name.'.player.'.@player['id'].'.tool.id.'.@tool['name']))

# If existing tool, Disable tool.
if(is_array(@toolcheck)) {
	if(array_index_exists(@toolcheck, 'use')) {
		#this tool has been used before
		if(@toolcheck['use'] == true) {
		# Disable tool.
			@toolcheck['use'] = false
			export(@name.'.player.'.@player['id'].'.tool.id.'.@tool['name'], @toolcheck)
			die(color(7).'['.color(6).@name.color(7).'] '.color(3).'Tool unbound from your '.color('a').@tooldisplay['display'].'.')
		}
	}
}
# else, continue to enable tool.
@tooldata = array(use: true, fuel: false, qty: @itemqty, item: @item)
### Tool fuel: Fill furnace fuel, not the top of it.
if(@action == 'fuel') {
	@fuel = true
	@tooldata['fuel'] = true
}
#done
export(@name.'.player.'.@player['id'].'.tool.id.'.@tool['name'], @tooldata)
assign(@fuelmsg, '')
if(@fuel == true) {
		@fuelmsg = 'Furnace'
} else {
		@fuelmsg = 'Chest, Dispenser, or Furnace'
}
msg(color(7).'['.color(6).@name.color(7).'] '.color(3).'Tool bound to '.@tooldisplay['display'].'. Left-click a '.@fuelmsg.' to fill it with '.@itemids['display'].'.')
<<<