creative:/i [$id=3] [$amount=1] [$] = >>>
set_uncaught_exception_handler(closure(@ex){
     msg(color('c').@ex['message']);
     return(true);
   });
assign(@dev, import('ch.player.'.puuid(player(), 'dashless').'.developer'))

switch(to_lower($id)) {
# overrides for some Legacy IDs that are not being picked up by CH / minecraft data values
# or seemingly obvious names that don't actually match to anything as too generic
case '50':
case 'wall_torch':
	@id = 'TORCH'

case 'sign':
case 'wooden_sign':
case 'wood_sign':
	@id = 'OAK_SIGN'

default:
# check complete, switch variable type
	@id = $id
}

@ids = array()
# Get rid of a 0 data value
if(reg_count('[0-9]+:0', @id) == 1) {
	@id = reg_split(':', @id)[0]
}
# item:subitem argument syntax not supported internally anymore, translated here
if(reg_count('[0-9]+:[0-9]+', @id) == 1) {
	@ids = reg_split(':', @id)
	@id = data_name(array(name: data_name(@ids[0]), data: @ids[1]))
	@idn = $id
} else {
	# normal legacy ID or normal name
	if(is_numeric(@id)) {
		assign(@id, data_name(@id))
		assign(@idn, $id)
	} else {
		assign(@id, to_upper(@id))
		assign(@idn, data_values(@id))
		if(@idn == null) {
			@idn = 'ID Not Found'
		}
	}
}

#no decimal points supported, this will round up
if(is_integral($amount)) {
#is a number
	@amount = $amount
} else {
	if(reg_count('\\.', $amount) == 1) {
	# Must be whole numbers, rounding if 1 decimal point detected. 
	# If you are using multiple decimal points, tf are you trying to do?
		@amount = integer(round($amount))
		#round returns number.0 
	} else {
	# option specified not accepted, using default of 1
		@amount = 1
	}
}
if(@dev == true) {
	msg(color(7).'[DEV]: '.@id.' ('.@idn.')')
}
#setup final array datas
@give = array('meta': null, 'name': to_upper(@id), 'qty': @amount)
	
pgive_item(player(), @give)
msg(color(6).'Giving '.color(3).@amount.color(6).' of '.color('a').to_lower(@id))
<<<