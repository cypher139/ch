everyone:/csvim [$filename] [$type1] [$type2] [$] = >>>
proc _help() {
	msg(color(6).'CSV reader')
	msg(color(7).'/codegen'.color(3).' - '.color('f').'Prints a randomly generated code. Defaults to a code 7 characters in length using uppercase, lowercase, and numbers.')
	msg(color('a').'Command usage: <required> [optional]')
	msg(color(3).'/codegen [length] [Character type 1] [Character type 2]')
	msg(color(3).' - '.color('f').' You can specify how many characters the code should be, and specify the types of characters.')
	msg(color(3).' - '.color('f').' Character types: lowercase ("lower"), uppercase ("upper"), number ("num"), or all.')
}

switch($filename){

case 'help':
case '-help':
case '?':
case '/?':
	_help()

default:
	msg(color(7).'['.color(6).'CSV Import'.color(7).'] '.color(3).'File path: '.color('r').file_resolve($filename))
	try(read($filename), @fail, die(color(7).'['.color(6).'CSV Import'.color(7).'] '.'Cannot read specified file. Make sure to type the file path correctly.'))
	assign(@importedfile, _csv_importer($filename, $type1, $type2))
	msg(color(7).'['.color(6).'CSV Import'.color(7).'] '.color(7).'File read! '.simple_date('E, h:m:s.S a').':')
	msg(@importedfile)

	msg(reg_split('.csv', to_lower($filename))[0])

	@var1 = reg_split('\n', @importedfile)
	msg(@var1)

	@array = reg_split('\n', @importedfile)
	@newarray = associative_array()
	foreach(@key: @value in @array){
#		msg(@key . ': ' . @value);
		@si = reg_split(',', @value)
		msg(@key.': si: '.@si)
		@newarray[@si[0]] = @si[1]
		msg('reg: '.reg_split('\n', @si[1])[0])
	}
	msg('na: '.@newarray)
	msg('lines processed: '.array_size(@array))
}
<<<
