#version 1.1-tmc
#requires build #85
admin:/discordbot [$action] [$] = >>>
@name = 'Discord'
@prefix = '['.@name.'] '
@args = parse_args($)
@action = to_lower(string($action))
@botconfig = import('DiscordBot.config.Discord')
@guilds = import('DiscordBot.Guilds')
@guild = @botconfig['Primary_Guild']
foreach(@arg in @args) {
	if(array_contains(@guilds, @arg)) {
		@guild = @arg
		array_remove_values(@args, @arg)
		break()
	}
}
# Command actions for Discord commands side required here
include_dir('command.library');
#pseudo array for actions that require event array
# 777378696782657084 = ASCII: MINECRAFT
@discord = array('bot': false, 'serverid': @guild, 'userid': 777378696782657084, 'username': player(), 'message': $)

@config = import('DiscordBot.config.'.@guild)
msg('Using Server ID: '.@guild)

switch(@action) {
case '1to100':
	@return = _discordBot_cmd_1to100(@discord, @args)
	if(is_array(@return)) {
		msg(@return['content'])
		msg(@return['console'])
	} else {
		msg(@return)
	}
case 'cointoss':
	@return = _discordBot_cmd_cointoss(@discord, @args)
	if(is_array(@return)) {
		msg(@return['content'])
		msg(@return['console'])
	} else {
		msg(@return)
	}
case 'asremove':
	@return = _discordBot_cmd_asremove(@discord, @args)
	if(is_array(@return)) {
		msg(@return['content'])
		msg(@return['console'])
	} else {
		msg(@return)
	}
case 'backup':
	_discordBot_backup_members();
case 'update':
	@startTime = time();
	msg(color('a').'Updating DiscordBot\'s internal cache data for each guild...')
	_discordBot_update_members();
	x_thread_join('DiscordBotUpdate', 10000)
	@stats = import('DiscordBot.debug.stats.last.updatemembers')
	if(is_array(@stats)) {
		foreach(@guild: @data in @stats) {
			msg('Guild: '.@guild)
			foreach(@k: @v in @data) {
				if(is_array(@v) || @v > 0) {
					msg(@k.': '.@v)
				}
			}
		}
	}
	@timeElapsed = time() - @startTime;
	msg(color(3).'Time elapsed: '.@timeElapsed.'ms.')
case 'memberinfo':
	if(!array_index_exists(@args, 0)) { die(color('c').'Specify the Discord user ID to view!') }
	@gmr = discord_member_info(@guild, @args[0])
	msg(color('a').'Member info:')
	msg(@gmr)
case 'viewinvites':
	discord_retrieve_invites(@guild, closure(@ex) { 
		console(@ex) 
		_write_file(import('DiscordBot.logs.dir').'/'.@guild.'/Raw-Invites.yml', yml_encode(@ex, true), 'overwrite')
	});
case 'transferroles':
	@return = _discordBot_cmd_transferroles(@discord, @args)
	if(is_array(@return)) {
		msg(@return['content'])
		msg(@return['console'])
	} else {
		msg(@return)
	}
case 'getroles':
	if(!array_index_exists(@args, 0)) { die(@prefix.color('c').'Specify the Discord user ID!') }
	if(!array_index_exists(@args, 1)) { @args[] = 0 }
	@roles = ''
	switch(@args[1]) {
	case 0:
	case 'discord':
	case 'chd':
		try {
			@roles = discord_member_get_roles(@guild, @args[0])
			if(player() != '~console') { @roles = array_keys(@roles) }
		} catch(NotFoundException @ex) {
			die(@prefix.color('e').'User ID Not Found on Server.')
		} catch(Exception @ex) {
			die(@prefix.color('c').'Discord User ID: '.@ex['message'])
		}
	case 1:
	case 'saved':
	case 'gv':
		@roles = get_value('DiscordBot.'.@guild.'.members.roles')
		if(is_array(@roles)) {
			if(array_index_exists(@roles, @args[0])) {
				@roles = @roles[@args[0]]
			} else {
				die(@prefix.color('c').'Discord User ID not found in internal storage!')
			}
		} else { die(@prefix.'Internal storage not found') }
	default:
		die(color('e').'Specify Search type: CHDiscord cache or internal storage')
	}
	msg(color('a').@prefix.'Roles found for User '.color(3).@args[0].color('a').': '.color('r').@roles)

case 'vcstats':
case 'vc':
	@channel = array_keys(@config['VC_Options'])[0]
	foreach(@arg in @args) {
		if(array_contains(array_keys(@config['VC_Options']), @arg)) {
			@channel = @arg
			array_remove_values(@args, @arg)
			break()
		}
	}
	@id = null
	@a = ''
	if(array_index_exists(@args, 1)) { @a = '.alone' }
	if(!array_index_exists(@args, 0)) { @args = array('None') }
	@stats = get_value('DiscordBot.'.@guild.'.VC.'.@channel.@a)
	if(!is_array(@stats)) { die('['.@name.'] There are no stats saved.') }	
	if(is_numeric(@args[0])) {
		@id = $id - 1
	}
	switch(@id) {
	case 0..19:
		if(array_index_exists(@stats, @id)) {
			msg(color(9).'['.@name.'] Last Voice Chat stat #'.(@id + 1).':');
			msg('Channel: '.@stats[@id]['channel'].' Start: '.simple_date('MM/dd/yy HH:mm', @stats[@id]['start']).' / End: '.simple_date('MM/dd/yy HH:mm', @stats[@id]['end']));
			msg('Users joined: '.color('b').array_implode(@stats[@id]['users'], ', '));
			if(array_index_exists(@stats[@id], 'pinguser')) {
				msg('User that triggered VC Role ping: '.@stats[@id]['pinguser']);
			}
		} else { msg('['.@name.'] Voice Chat ID was not found.') }
	case 'all':
	case null:
		msg('['.@name.'] Last Voice Chat stats:')
		foreach(@i: @stat in @stats) {
			msg(color(9).'#'.(@i + 1).':'.color('r').' Channel: '.@stat['channel'].' Start: '.simple_date('MM/dd/yy HH:mm', @stat['start']).' / End: '.simple_date('MM/dd/yy HH:mm', @stat['end']));
			msg('Users joined: '.color('b').array_implode(@stat['users'], ', '));
			if(array_index_exists(@stat, 'pinguser')) { msg('User that triggered VC Role ping: '.@stat['pinguser']) }
		}
	default:
		msg('['.@name.'] Last Voice Chat ID not recognized.');
	}

case 'wrf':
case 'welcomerolesfinder':
	if(!array_index_exists(@args, 0)) { @args = array('r') }
	@return = _discordBot_WelcomeRolesFinder(@args[0])
	if(reg_count('^[WwNn]', @args[0]) > 0) {
		msg('['.@name.'] IDs: \n'.array_implode(@return['list'], '\n'))
		msg('['.@name.'] '.@return['amount'].' '.@return['msg'])
	} else {
		if(array_index_exists(@return, 'zero')) {
			msg('['.@name.'] '.@return['zero'].' members were detected as having 0 roles.')
		}
		if(array_index_exists(@return, 'welcome')) {
			msg('['.@name.'] '.@return['welcome'].' members were detected as having only the Welcome Roles.')
		}
	}
default:
msg('Action Not Recognized!')	
}
<<<