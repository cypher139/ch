#Admin actions for the Discord bot, accessed via the Minecraft server
admin:/dbadmin [$action] [$] = >>>
@name = 'Discord'
@prefix = '['.@name.'] '
@args = parse_args($)
@action = to_lower(string($action))
@botconfig = import('DiscordBot.config.Bot')
@servers = import('DiscordBot.Servers')
@serverID = @botconfig['Primary_Guild']
foreach(@arg in @args) {
	if(array_contains(@servers, @arg)) {
		@serverID = @arg
		array_remove_values(@args, @arg)
		break()
	}
}
# Command actions for Discord commands side required here
include_dir('command.library');
#pseudo array for actions that require event array
# 777378696782657084 = ASCII: MINECRAFT
@discord = array('admin': true, 'bot': false, 'serverid': @serverID, 'userid': 777378696782657084, 'username': player(), 'message': $)

@config = import('DiscordBot.config.'.@serverID)
msg('Using Server ID: '.@serverID)

switch(@action) {
case 'checkpermissions':
case 'getperms':
	@perms = discord_get_permissions(@serverID)
	@requiredPerms = array(
	# basics:
	'MESSAGE_SEND': 'I Cannot post *any* messages! How will users interact with me?',
	'MESSAGE_SEND_IN_THREADS': 'I can\'t post messages in threads, users will need to use regular channels then.',
	'MESSAGE_HISTORY': 'Any messages I send may not be able to reference another message.',
	'VIEW_CHANNEL': 'If I can\'t see messages how am I supposed to interact with it?',
	'MESSAGE_EXT_EMOJI': 'This grants the ability for Cross-Server Chat to use emojis from their servers.',
	#advanced
	'MANAGE_SERVER': 'Required for Invite logging. This grants the ability to retrive your server\'s invites.',
	'MESSAGE_MANAGE': 'Required to delete others messages. Used for: <Anti Spam: remove spam messages> <Showcase: remove chat messages>',
	'MANAGE_WEBHOOKS': 'Required to retrive data about webhooks. Used in various embeds to show the webhook\'s avatar, if a webhook updates a message.',
	'VOICE_MOVE_OTHERS': '\"MOVE_MEMBERS\" grants the ability for Voice Chat features to disconnect any bots still in voice channel when all users leave.',
	'MANAGE_ROLES': 'Setting roles grants the ability for various role related functions to operate: <Leaderboards: Active User, Role Ranks> <Commands: Fakeadmin, transferroles> <Restore previous roles upon user rejoin> <Welcome roles on user join>'
	)
	@results = array('true': array(), 'false': '', 'notreq': array())
	if(array_contains(@perms, 'ADMINISTRATOR')) {
		die(color(10).'Administrator permissions detected, therefore the bot has the permissions it needs!');
	}
	foreach(@p: @desc in @requiredPerms) {
		if(array_contains(@perms, @p)) {
			@results['true'][] = @p
		} else {
			@results['false'] = @results['false'].'\n'.color(12).@p.': '.color(7).@desc
		}
	}
	msg(color(10).'Required and Granted Permissions: '.color(9).array_implode(@results['true'], '  '))
	if(@results['false'] != '') {
		msg(color(4).'Permissions **Not** Found:'.@results['false'])
	}
case '1to100':
	@return = _discordBot_cmd_1to100(@discord, @args)
	if(is_array(@return)) {
		msg(@return['content'])
		msg(@return['console'])
	} else {
		msg(@return)
	}
case 'cointoss':
	@return = _discordBot_cmd_cointoss(@discord, @args)
	if(is_array(@return)) {
		msg(@return['content'])
		msg(@return['console'])
	} else {
		msg(@return)
	}
case 'asremove':
	@return = _discordBot_cmd_asremove(@discord, @args)
	if(is_array(@return)) {
		msg(@return['content'])
		msg(@return['console'])
	} else {
		msg(@return)
	}
case 'backup':
	_discordBot_backup_guild_data();
case 'update':
	@startTime = time();
	msg(color(10).'Updating DiscordBot\'s internal cache data for each guild...')
	_discordBot_update_members();
	x_thread_join('DiscordBotUpdate', 10000)
	@stats = import('DiscordBot.debug.stats.last.updatemembers')
	if(is_array(@stats)) {
		foreach(@serverID: @data in @stats) {
			msg('Guild: '.@serverID)
			foreach(@k: @v in @data) {
				if(is_array(@v) || @v > 0) {
					msg(@k.': '.@v)
				}
			}
		}
	}
	@timeElapsed = time() - @startTime;
	msg(color(3).'Time elapsed: '.@timeElapsed.'ms.')
case 'memberinfo':
	if(!array_index_exists(@args, 0)) { die(color(12).'Specify the Discord user ID to view!') }
	@gmr = discord_member_info(@serverID, @args[0])
	msg(color(10).'Member info:')
	msg(@gmr)
case 'viewinvites':
	discord_retrieve_invites(@serverID, closure(@ex) { 
		console(@ex) 
		_write_file(import('DiscordBot.logs.dir').'/'.@serverID.'/Raw-Invites.yml', yml_encode(@ex, true), 'overwrite')
	});
case 'transferroles':
	@return = _discordBot_cmd_transferroles(@discord, @args)
	if(is_array(@return)) {
		msg(@return['content'])
		msg(@return['console'])
	} else {
		msg(@return)
	}
case 'getroles':
	if(!array_index_exists(@args, 0)) { die(@prefix.color(12).'Specify the Discord user ID!') }
	if(!array_index_exists(@args, 1)) { @args[] = 0 }
	@roles = ''
	switch(@args[1]) {
	case 0:
	case 'discord':
	case 'chd':
		try {
			@roles = discord_member_get_roles(@serverID, @args[0])
			if(player() != '~console') { @roles = array_keys(@roles) }
		} catch(NotFoundException @ex) {
			die(@prefix.color(14).'User ID Not Found on Server.')
		} catch(Exception @ex) {
			die(@prefix.color(12).'Discord User ID: '.@ex['message'])
		}
	case 1:
	case 'saved':
	case 'gv':
		@roles = get_value('DiscordBot.'.@serverID.'.members.roles')
		if(is_array(@roles)) {
			if(array_index_exists(@roles, @args[0])) {
				@roles = @roles[@args[0]]
			} else {
				die(@prefix.color(12).'Discord User ID not found in internal storage!')
			}
		} else { die(@prefix.'Internal storage not found') }
	default:
		die(color(14).'Specify Search type: CHDiscord cache or internal storage')
	}
	msg(color(10).@prefix.'Roles found for User '.color(3).@args[0].color(10).': '.color('r').@roles)

case 'vcstats':
case 'vc':
	proc _vc_display_duration(@time) {
		@dateType = 'HH\'h\' mm\'m\' ss\'s\''
		@dl = ''
		if(@time < 60000) {
		#less than min
			@dateType = 'ss\'s\''
		} else if(@time >= 60000 && @time < 3600000) {
		#over 1 min
			@dateType = 'mm\'m\' ss\'s\''
		} else if(@time >= 3600000 && @time < 86400000) {
		#over 1 hour - uses above default.
			@dateType = 'HH\'h\' mm\'m\' ss\'s\''
		} else if(@time >= 86400000) {
		#over 1 day
			@dl = (simple_date('D', @time) - 1).'d '
		} 
		return(@dl.simple_date(@dateType, @time));
	}
	proc _vc_display_stat(@stat, @prefix, @vcrole) {
		@callLength = @stat['end'] - @stat['start']
		msg(@prefix.'Channel: '.@stat['channel'].' Start: '.simple_date('MM/dd/yy HH:mm', @stat['start']).' / End: '.simple_date('MM/dd/yy HH:mm', @stat['end']).' [Length: '._vc_display_duration(@callLength).']');
		if(array_index_exists(@stat, 'pinguser')) {
			msg(color(13).@stat['pinguser'].color('r').' triggered @'.@vcrole.' ping.');
		}
		if(array_index_exists(@stat, 'time')) {
			@message = 'Users joined: '.color(10).array_size(@stat['users']).color('r').' ('.color(11)
			foreach(@userID: @userName in @stat['users']) {
				@message = @message.@userName.color(8).' ['._vc_display_duration(@stat['time'][@userID]).'], '.color(11)
			}
			msg(@message.color('r').')')
		} else { 
			msg('Users joined: '.color(11).array_implode(@stat['users'], color(8).', '.color(11)));
		}
	}
	@channel = array_keys(@config['VC_Options'])[0]
	foreach(@arg in @args) {
		if(array_contains(array_keys(@config['VC_Options']), @arg)) {
			@channel = @arg
			array_remove_values(@args, @arg)
			break()
		}
	}
	@vcrole = @config['VC_Options'][@channel]['VC_Role_Name']
	@id = 0
	@sid = 1
	@a = ''
	if(array_index_exists(@args, 1)) { @a = '.alone' }
	if(!array_index_exists(@args, 0)) { @args[] = 'all' }
	@stats = get_value('DiscordBot.'.@serverID.'.VC.'.@channel.@a)
	if(!is_array(@stats)) { die('['.@name.'] There are no VC channel stats saved.') }	
	if(is_numeric(@args[0])) {
		@id = integer(abs(@args[0]) - 1)
		if(@id < 0) { @id = 0 }
		if(array_index_exists(@stats, @id)) {
			msg(color(9).'['.@name.'] "'.@stats[@id]['channel'].'" channel\'s Last Voice Chat #'.(@id + 1).':');
			_vc_display_stat(@stats[@id], '', @vcrole)
		} else { 
			msg('['.@name.'] That Voice Chat number was not found.')
		}
	} else {
		switch(@args[0]) {
		case 'fix':
			if(@a != '') { die() }
			msg('['.@name.'] Fix All '.@config['Server_Nickname'].' Voice Chat stats for channel: '.@stats[0]['channel'])
			@alonestats = get_value('DiscordBot.'.@serverID.'.VC.'.@channel.'.alone')
			foreach(@i: @stat in @stats) {
				if(array_size(@stat['users']) < 2) {
					@alonestats[] = @stat
					array_remove(@stats, @i)
				}
			}
			foreach(@i: @stat in @stats) {
				 _vc_display_stat(@stat, color(9).'#'.(@i + 1).':'.color('r').' ', @vcrole)
			}
			store_value('DiscordBot.'.@serverID.'.VC.'.@channel.'.alone', @alonestats)
			store_value('DiscordBot.'.@serverID.'.VC.'.@channel, @stats)
		case 'all':
		default:
			msg('['.@name.'] All '.@config['Server_Nickname'].' Voice Chat stats for channel: '.@stats[0]['channel'])
			foreach(@i: @stat in @stats) {
				 _vc_display_stat(@stat, color(9).'#'.(@i + 1).':'.color('r').' ', @vcrole)
			}
		}
	}

case 'wrf':
case 'welcomerolesfinder':
	if(!array_index_exists(@args, 0)) { @args = array('w') }
	@args[] = 'mc'
	@return = _discordBot_cmd_wrf(@discord, @args)
	if(!is_array(@return)) { die('['.@name.'] '.color(7).@return) }
	if(array_index_exists(@args, 1)) {
		if(reg_count('^[Ll]', @args[1]) > 0 && array_size(@return['MCCmd']['list']) > 0) {
			msg('['.@name.'] IDs: \n'.array_implode(@return['MCCmd']['list'], '\n'))
		}
	}
	msg('['.@name.'] '.color(7).@return['MCCmd']['msg'])
case 'checkforbots':
	@checklist = json_decode(read(import('DiscordBot.config.dir').'/'.'botlist.json'))
	@clsize = array_size(@checklist)
	@guildMembers = discord_get_members(@serverID)
	@results = array()
	@logjointimes = get_value('DiscordBot.'.@serverID.'.log.users.Join.Times')
	@membersformer = get_value('DiscordBot.'.@serverID.'.members.former')
	if(!is_array(@logjointimes)) { @logjointimes = array() }
	if(!is_array(@membersformer)) { @membersformer = array() }
	#check #1: Active
	foreach(@i: @id in @checklist) {
		if(array_contains(@guildMembers, @id)) {
			array_set(@results, @id, array('type': 'active', 'join': discord_member_info(@serverID, @id)['joined_at']))
			continue()
		}
	#check #2: join logs
		if(array_index_exists(@logjointimes, @id)) {
			array_set(@results, @id, array('type': 'log', 'join': @logjointimes[@id]))
			continue()
		}
	}
	#check #3: channel join-log?
	#Message Results
	@color = 10
	if(array_size(@results) > 0) { @color = 12 }
	msg(color(7).'Found '.color(@color).array_size(@results).color(7).' matches out of '.color(14).@clsize.color(7).' Bot IDs checked.')
	if(array_index_exists(@results, 0)) {
		@sendMsg = ''
		foreach(@id: @r in @results) {
			@msg = 'ID: '.@id.' '
			if(@r['type'] == 'active') {
				@info = discord_member_info(@serverID, @id)
				@msg = @msg.color(9).'Username: '.@info['username'].color(14).' (Current '.color(7).'Guild Member)'.color(11).' Joined server: '.simple_date('MM/dd/yyyy HH:mm:ss.SSS', @r['join'], 'UTC')
			}			
			if(@r['type'] == 'log') {
				@info = array('user': '', 'code': '')
				if(array_index_exists(@membersformer, @id)) {
					@info = @membersformer[@id]
				}
				foreach(@k: @date in @r['join']) {
					@r['join'][@k] = simple_date('MM/dd/yyyy HH:mm:ss.SSS', @date, 'UTC')
				}
				@msg = @msg.color(9).'Username: '.@info['user'].color(8).'Last invite code: '.@info['code'].color(11).'(Former '.color(7).'Guild Member)'.color(11).' Joined server: '.array_implode(@r['join'], ', ')
			}
			@sendMsg = @sendMsg.'\n'.@msg
		}
		msg(@sendMsg)
	}
default:
msg('Action Not Recognized!')	
}
<<<