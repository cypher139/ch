#Debug actions, not meant for normal everyday usage, just bot maintenance.
admin:/dbdbg [$action] [$] = >>>
@name = 'Discord'
@prefix = '['.@name.'] '
@args = parse_args($)
@action = to_lower(string($action))
@botconfig = import('DiscordBot.config.Bot')
@guilds = import('DiscordBot.Guilds')
@guild = @botconfig['Primary_Guild']
foreach(@arg in @args) {
	if(array_contains(@guilds, @arg)) {
		@guild = @arg
		array_remove_values(@args, @arg)
		break()
	}
}
msg('Using Server ID: '.@guild)
switch(@action) {
case 'react':
	@channelID = import('DiscordBot.debug.cmd.react.id.channel')
	@msgID = import('DiscordBot.debug.cmd.react.id.message')
	if(is_array(@channelID)) { @channelID = @channelID[0] }
	if(is_array(@msgID)) { @msgID = @msgID[0] }
	discord_request('PUT', 'channels/'.@channelID.'/messages/'.@msgID.'/reactions/%E2%9C%85/@me', null, closure(@ex) { console('reaction success: \n'.@ex) }, closure(@ex) { console('reaction failed: \n'.@ex) })
	discord_request('PUT', 'channels/'.@channelID.'/messages/'.@msgID.'/reactions/%E2%9D%8C/@me', null, closure(@ex) { console('reaction success: \n'.@ex) }, closure(@ex) { console('reaction failed: \n'.@ex) })
case 'backup':
	_discordBot_backup_guild_data();
case 'update':
	@startTime = time();
	msg(color(10).'Updating DiscordBot\'s internal cache data for each guild...')
	_discordBot_update_members();
	@stats = import('DiscordBot.debug.stats.last.updatemembers')
	if(is_array(@stats)) {
		foreach(@guild: @data in @stats) {
			msg('Guild: '.@guild)
			foreach(@k: @v in @data) {
				if(is_array(@v) || @v > 0) {
					msg(@k.': '.@v)
				}
			}
		}
	}
	@timeElapsed = time() - @startTime;
	msg(color(3).'Time elapsed: '.@timeElapsed.'ms.')
case 'removeinvite':
	@previnv = get_value('DiscordBot.'.@guild.'.Join.info')
	@inv = get_value('DiscordBot.'.@guild.'.Invites')
	if(is_array(@previnv[@args[0]]['code'])) {
		if(array_index_exists(@previnv, @args[0], 'code', 1)) {
			array_remove_values(@previnv[@args[0]]['code'], @args[1])
			msg(color(10).'Removed invite code '.@args[1].' from ID '.@args[0])
		} else {
			msg(color(14).'Only one code exists, are you sure you want to remove this code?')
		}
		if(array_size(@previnv[@args[0]]['code']) == 1) {
			@invid = discord_member_info(@guild, @inv[array_implode(@previnv[@args[0]]['code'], '')]['userid'])
			@previnv[@args[0]]['inviter'] = @invid['username']
			@previnv[@args[0]]['inviterid'] = @invid['userid']
			@previnv[@args[0]]['code'] = array_implode(@previnv[@args[0]]['code'], '')
		}
		store_value('DiscordBot.'.@guild.'.Join.info', @previnv)
	} else {
		msg(color(12).'Only one code exists, are you sure you want to remove this code?')
	}
case 'memberinfo':
	if(!array_index_exists(@args, 0)) { die(color(12).'Specify the Discord user ID to view!') }
	@gmr = discord_member_info(@guild, @args[0])
	msg(color(10).'Member info:')
	msg(@gmr)
case 'getmembers':
	@gmr = discord_get_members(@guild)
	msg('All members:')
	msg(@gmr)
case 'getmemberroles':
case 'gmr':
	if(!array_index_exists(@args, 0)) { die(color(12).'Specify the Discord role ID to view!') }
	@gmr = discord_get_members_with_role(@guild, @args[0])
	msg(color(10).'Members with role "'.@args[0].'":')
	msg(@gmr)
case 'viewinvites':
	discord_retrieve_invites(@guild, closure(@ex) { 
		console(@ex) 
		store_value('DiscordBot.debug.invites.save', @ex)
		_write_file(import('DiscordBot.logs.dir').'/'.@guild.'/Raw-Invites.yml', yml_encode(@ex, true), 'overwrite')
	});
case 'addformerjoinlog':
	@LogJoinTimes = get_value('DiscordBot.'.@guild.'.log.users.Join.Times')
	if(!is_array(@LogJoinTimes)) { @LogJoinTimes = array() }
	@membersFormer = get_value('DiscordBot.'.@guild.'.members.former')
	if(!is_array(@membersFormer)) { die('no former info in guild') }
	@adds = 0
	foreach(@userid: @userinfo in @membersFormer) {
		@index = 0
		if(!array_index_exists(@userinfo, 'time')) { continue() }
		if(array_index_exists(@LogJoinTimes, @userid)) { 
			if(array_contains(@LogJoinTimes[@userid], @userinfo['time'])) { continue() }		
		} else { 
			array_set(@LogJoinTimes, @userid, array())
		}
		@LogJoinTimes[@userid][] = @userinfo['time'];
		@adds++
	}
	store_value('DiscordBot.'.@guild.'.log.users.Join.Times', @LogJoinTimes)
	@color = 7
	if(@adds > 0) { @color = 10 }
	msg(color(@color).'Added '.color(9).@adds.color(@color).' entries (out of '.array_size(@membersFormer).') to Join Times log.')
case 'findmultiplejoins':
	@LogJoinTimes = get_value('DiscordBot.'.@guild.'.log.users.Join.Times')
	@results = array()
	foreach(@userid: @usertimes in @LogJoinTimes) {
		if(array_size(@usertimes) > 1) {
			array_set(@results, @userid, @usertimes)
		}
	}
	@color = 10
	if(array_size(@results) > 0) { @color = 12 }
	@sendMsg = color(7).'Found '.color(@color).array_size(@results).color(7).' out of '.color(14).array_size(@LogJoinTimes).color(7).' known joins:'
	if(array_size(@results) > 0) {
		@membersformer = get_value('DiscordBot.'.@guild.'.members.former')
		foreach(@id: @dates in @results) {
			@msg = 'ID: '.@id.' '
			@info = array('username': '', 'code': '')
			if(array_index_exists(@membersformer, @id)) {
				@info = @membersformer[@id]
			}
			@displayDates = array()
			foreach(@k: @date in @dates) {
				@displayDates[] = simple_date('MM/dd/yyyy HH:mm:ss.SSS', @date, 'UTC')
			}
			@msg = @msg.color(9).'| Username: '.@info['user'].color(8).' | Last invite code: '.@info['code'].color(11).' | Server joins: '.color(11).array_implode(@displayDates, ', ')
			@sendMsg = @sendMsg.'\n'.@msg
		}	
	}
	msg(@sendMsg)
case 'snowflaketime':
	if(!array_index_exists(@args, 0)) { @args[] = @botconfig['Bot_ID'] }
	msg('Snowflake: '.@args[0])
	@snowtime = _db_get_snowflake_time(@args[0])
	msg('Timestamp: '.@snowtime)
	msg(color(10).'Date: '.simple_date('MM/dd/yyyy HH:mm:ss.SSS', @snowtime, 'UTC'))
	msg(color(11).'ISO8601: '.simple_date('yyyy-MM-dd\'T\'HH:mm:ss.SSS\'000+00:00\'', @snowtime, 'UTC'))
case 'findoldestdiscord':
	@serverMembers = discord_get_members(@guild)
	array_sort(@serverMembers, 'NUMERIC')
	msg(color(14).'Top 5 oldest Discord Accounts on this server:')
	foreach(@i: @userID in @serverMembers) {
		@joined = ''
		if(@i > 4) { break() }
		@colors = array(11,10,6,3,9)
		@userInfo = discord_member_info(@guild, @userID)
		if(array_contains(@args, 'join')) { @joined = '\n Joined server: '.simple_date('MM/dd/yyyy HH:mm:ss', @userInfo['joined_at'], 'UTC') }
		@lc = 7
		if(length(@userID) < 18) { @lc = 11 }
		msg(color(@colors[@i]).'#'.(@i + 1).': '.@userInfo['username'].color(7).' <'.@userID.'> ('.color(@lc).length(@userID).color(7).') Joined: '.simple_date('MM/dd/yyyy HH:mm:ss', rshift(@userID, 22) + 1420070400000, 'UTC').@joined)
	}
	
default:
msg('Action Not Recognized!')	
}
<<<