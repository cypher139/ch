######################################################
#
#   CH: Developer debug tools for making CommandHelper scripts..
#   These scripts make it easier for you to debug what's going on in your scripts, or just /reloadaliases easily.
#
######################################################

admin:/ch [$action] [$] = >>>
@name = 'ch'
@args = parse_args($)
@player = player()
# Get other player name  
foreach(@v in @args) {
	if(array_contains_ic(all_players(), @v)) {
		@otherplayer = player(@v)
	}
}

@action = to_lower($action)
@option1 = ''
@option2 = ''
if(array_index_exists(@args, 0)) { @option1 = @args[0] } 
if(array_index_exists(@args, 1)) { @option2 = @args[1] } 


if(array_contains(all_players(), @option1)) { @player = @option1 }
@playerID = _getplayerID(@player)

proc _ch_help(@page) {
	msg(color(6).'Cypher139\'s CommandHelper debug script help:')
	msg(color(9).'Arguments usage: <required> [optional]')
	@maxpage = 2
	switch(@page) {
	case 2:
	case 'db': 
		msg(color(6).'Persistance Database Actions:')
		msg(color(7).'/ch clearvalue <value>'.color(4).' - '.color('f').'Clears the specified value in database. FOR DEBUG USE ONLY.')
		msg(color(7).'/ch getvalue <value> [index]'.color(4).' - '.color('f').'Gets the specified value from database. If the value is an array, providing an index will show that index only.')
		msg(color(7).'/ch hasvalue <value>'.color(4).' - '.color('f').'Returns if the specified value exists.')
		msg(color(7).'/ch storevalue <value> <data>'.color(4).' - '.color('f').'Stores the data into the specified value in database. FOR DEBUG USE ONLY.')
		msg(color(7).'/ch getvalues <search>'.color(4).' - '.color('f').'Gets all database values from the specified search value. If none is provided, tries the current player.')
		msg(color(7).'/ch hasvalues <search> <format>'.color(4).' - '.color('f').'Returns if any database keys exist from the specified search value.')
		msg(color(7).'/ch export <value> <data>'.color(4).' - '.color('f').'Stores the data into the specified value into RAM, that will be lost on server reboot. FOR DEBUG USE ONLY.')
		msg(color(7).'/ch import <value> [index]'.color(4).' - '.color('f').'Gets the specified value from RAM. If the value is an array, providing an index will show that index only.')
		msg(color(7).'/ch clearindex <value> <index>'.color(4).' - '.color('f').'Clears the specified index in the array present in the value given. FOR DEBUG USE ONLY.')
		msg(color(7).'/ch exportvalue <value> <format>'.color(4).' - '.color('f').'Exports the specified value to a file. Formats accepted are json, yml, and raw.')
		msg(color(7).'/ch clearvalues <search>'.color(4).' - '.color('f').'Clears any database entries matching the search value. Use search term "undo" to undo a previous clear.')
		msg(color(7).'/ch hasexport <search>'.color(4).' - '.color('f').'Loads database values from the search given and checks if a matching copy is present in RAM.')
		msg(color(7).'/ch copy <from> <to>'.color(4).' - '.color('f').'Copies the data contained in "from" key to the "to" key.')
	case 1:
	default:
		msg(color(6).'Actions:')
		msg(color(7).'/ch dumpevents'.color(4).' - '.color('f').'Dumps output of the dump_events() function, which tells all events CH is listening to and their file locations.')
		msg(color(7).'/ch pinfo <player>'.color(4).' - '.color('f').'Dumps all output of the pinfo() function, which lists random infomation about the specified player')
		msg(color(7).'/ch tolower <text>'.color(4).' - '.color('f').'Returns an all-lowercase version of the text provided.')
		msg(color(7).'/ch toupper <text>'.color(4).' - '.color('f').'Returns an all-uppercase version of the text provided.')
		msg(color(7).'/ch verbose'.color(4).' - '.color('f').'Turns on/off "verbose": extra messages in scripts that primarily might be considered spam, hence a option to enable/disable them.')
		msg(color(7).'/ch dev'.color(4).' - '.color('f').'Turns on/off "dev": developer messages in scripts primarily used in debugging.')
		msg(color(7).'/ch extfunctions'.color(4).' - '.color('f').'Shows available Extension Events and Functions.')
		msg(color(7).'/ch ext'.color(4).' - '.color('f').'Shows installed extensions.')
		msg(color(7).'/ch'.color(4).' - '.color('f').'Reloads aliases and reloads dev message settings.')
	}
}

@prefix = color(7).'['.color(6).@name.color(7).'] '

switch(@action){

case 'r':
run_cmd(/recompile)

case 'help':
case '-help':
case '?':
case '/?':
	_ch_help(@option1)
case 'version':
case 'build':
case 'info':
	msg(@prefix.engine_build_date())
	
case 'export':
case 'import':
case 'clearvalue':
case 'cv':
case 'getvalue':
case 'gv':
case 'clearindex':
case 'ci':
case 'exportvalue':
case 'ex':
case 'hasvalue':
case 'hv':
case 'storevalue':
case 'sv':
case 'getvalues':
case 'gvs':
case 'hasvalues':
case 'hvs':
case 'clearvalues':
case 'cvs':
case 'hasexport':
case 'he':
case 'copy':
case 'cp':
	# call_alias('/chdb '.@action.' '.$)	
	include_dir('../Functions.library')
	@return = _chdb($action, $)
	msg(@return)

	
case 'events':
case 'dumpevents':
case 'ev':
	msg(@prefix.color(7).'-----')
	msg(@prefix.color(7).'Current binded events:')
	msg(@prefix.color(7).'-----')
	@j = 0
	@previoustype = ''
	@color = ''
	foreach(@k: @v in dump_events()) {
	# Parsing: (event_type) Event.ID:/file/system/path/file.ms:24
		@eventtype = reg_split(' ', reg_replace('^\\((.+)\\)', '$1', @v))[0]
		@eventid = reg_replace('^\\((.+)\\)[ ]', '', reg_split('[:]', @v)[0])
	#if last type matches, don't choose a new color. Otherwise inc unique types counter and colors.
		if(@previoustype != @eventtype) {	
			if(_is_even_number(@j) == true) { @color = 'e' } else { @color = 3 }
			@j++
		}
		@previoustype = @eventtype
		@pathdisplay = reg_split('\\/CommandHelper\\/', @v)[1]
		if(reg_count('(includes.library)', @pathdisplay) > 0) {
			@pathdisplay = 'includes.library/'.reg_split('\\/includes.library\\/', @pathdisplay)[1]
		}
		msg(color(@color).@eventtype.'      [ '.color(9).@eventid.color(@color).' ]')		
		msg(color(8).'Path: '.color(0).'../'.color(8).@pathdisplay)
	}
	msg(@prefix.color(7).'-----')
	msg(color(9).@j.color(7).' event types,  '.color(6).array_size(dump_events()).color(7).' total events found.')
	msg(@prefix.color(7).'-----')

case 'pinfo':
	msg(@prefix.color(7).'-----')
	msg(@prefix.color(7).'Player info:')
	msg(@prefix.color('d').'(0) name: '.color('f').pinfo(@player)[0])
	msg(@prefix.color('d').'(1) location: '.color('f').pinfo(@player)[1])
	msg(@prefix.color('d').'(2) cursor: '.color('f').pinfo(@player)[2])
	msg(@prefix.color('d').'(3) ip: '.color('f').pinfo(@player)[3])
	msg(@prefix.color('d').'(4) displayname: '.color('f').pinfo(@player)[4])
	msg(@prefix.color('d').'(5) health: '.color('f').pinfo(@player)[5])
	msg(@prefix.color('d').'(6) iteminhand: '.color('f').pinfo(@player)[6])
	msg(@prefix.color('d').'(7) worldname: '.color('f').pinfo(@player)[7])
	msg(@prefix.color('d').'(8) isop: '.color('f').pinfo(@player)[8])
	msg(@prefix.color('d').'(9) groups: '.color('f').pinfo(@player)[9])
	msg(@prefix.color('d').'(10) hostname: '.color('f').pinfo(@player)[10])
	msg(@prefix.color('d').'(11) sneak: '.color('f').pinfo(@player)[11])
	msg(@prefix.color('d').'(12) host: '.color('f').pinfo(@player)[12])
	msg(@prefix.color('d').'(13) entity uuid: '.color('f').pinfo(@player)[13])
	msg(@prefix.color('d').'(14) vehicle: '.color('f').pinfo(@player)[14])
	msg(@prefix.color('d').'(15) current slot number: '.color('f').pinfo(@player)[15])
	msg(@prefix.color('d').'(16) sleeping: '.color('f').pinfo(@player)[16])
	msg(@prefix.color('d').'(17) blocking: '.color('f').pinfo(@player)[17])
	msg(@prefix.color('d').'(18) flying: '.color('f').pinfo(@player)[18])
	msg(@prefix.color('d').'(19) sprinting: '.color('f').pinfo(@player)[19])
	msg(@prefix.color('d').'(20) Player UUID: '.color('f').pinfo(@player)[20])
	msg(@prefix.color(7).'-----')

case 'tolower':
case 'lower':
	if(array_size(@args) == 0) { die(color('c').'['.color(6).@name.color('c').'] '.color('c').'You have to say something!') }
	@text = array_implode(@args)
	@r = to_lower(@text)
	msg(@prefix.color(6).'Convert to lowercase:')
	msg(@prefix.color(7).'Original text: '.@text)
	msg(@prefix.color('d').'New text: '.color('f').@r)

case 'toupper':
case 'upper':
	if(array_size(@args) == 0) { die(color('c').'['.color(6).@name.color('c').'] '.color('c').'You have to say something!') }
	@text = array_implode(@args)
	@r = to_upper(@text) 
	msg(@prefix.color(6).'Convert to uppercase:')
	msg(@prefix.color(7).'Original text: '.@text)
	msg(@prefix.color('d').'New text: '.color('f').@r)

case 'verbose':
	@verbosesetting = get_value(@name.'.player.'.@playerID['id'].'.verbose')
	if(!is_boolean(@verbosesetting)) { @verbosesetting = false }
	@verbosesetting = !@verbosesetting
	store_value(@name.'.player.'.@playerID['id'].'.verbose', @verbosesetting)
	export(@name.'.player.'.@playerID['id'].'.verbose', @verbosesetting)
	if(@verbosesetting == true) {
		die(@prefix.color('a').'Enabled! '.color(7).'Verbose messages are enabled! If the script you use supports displaying extra messages using a global value, they will be displayed.')
	} else {
		die(@prefix.color('c').'Disabled! '.color(7).' Extra messages from scripts won\'t be displayed.')
	}

case 'dev':
case 'devmsg':
	@sendargs = array_implode(@args, ' ')
	call_alias('/devmsg '.@sendargs)

case 'extfunctions':
case 'extinfo':
	msg(@prefix.color(6).'Available Extension Events/Functions:')
	foreach(@ext: @data in extension_info()) {
		if(@ext == 'Core') { continue() }
		if(array_size(@data['events']) != 0) { 
			msg(@prefix.color(3).@ext.' '.color(2).'Events: '.color(7).@data['events'])
		}
		if(array_size(@data['functions']) != 0) { 
			msg(@prefix.color(3).@ext.' '.color(9).'Functions: '.color(7).@data['functions'])
		}
	} 
case 'extensions':
case 'ext':
	msg(@prefix.color(6).'Installed Extensions:')
	foreach(@ext: @data in extension_info()) {
		if(@ext == 'Core') { continue() }
		msg(@prefix.color(3).@ext.' '.color(7).'( Version: '.@data['version'].' )')
	}   
case 'player':
#	msg(vault_pgroup(@player, prefix))
	try(
		msg(puuid(@args[0], 'dashless'))
	,@fail, 
		msg('no puuid()')
	)
	try( 
		msg(player(@args[0]))
	,@fail, 
		msg('no player()')
	)

case 'randnumber':
	@rand = rand(@args[0], @args[1])
	msg(@rand)
case 'even':
	@cr = ''
	@return = _is_even_number(@args[0], @args[1])
	if(@return == true) { @cr = 'a' } else { @cr = 'c' }
	msg(@prefix.color(9).'Even Number? '.color(@cr)._capitalize(@return))

case 'props':
	msg(@prefix.color(6).'Server.properties:')
	msg(ini_decode(read(file_resolve(sys_properties()['user.dir'].'/server.properties'))))
case 'isproc':
	@ret = is_proc(@args[0])
	@color = 'c'
	if(@ret == true) { @color = 'a' }
	msg(@prefix.color(6).'is proc: '.color(9).@args[0].' '.color(@color).@ret)
case 'cap':
	msg(_capitalize(@args[2..], @args[0], @args[1]))

case 'gc':
	msg(get_commands())
case 'rd':
	msg(reflect_docs(@args[0], 'description'))
case 'sd':
case 'date':
	@time = 0
	if(array_index_exists(@args, 0)) {
		if(is_numeric(@args[0])) {
			@time = @args[0]
		} else if(@args[0] == 'time') {
			@time = time();
		} else {
			die('Not a timestamp?')
		}
	} else { @time = time(); }
	msg(simple_date('MM/dd/yyyy HH:mm:ss', @time))
	msg(simple_date('MM-dd-yy_HH-mm_', @time))
case 'time':
	msg(time())
	msg(substr(time(), 0, 10))
case '':
case null:
	@ds = get_value('ch.player.'.@playerID['id'].'.dev.scripts')
	@dsall = null
	if(!is_array(@ds)) { @ds = array() }
	if(array_contains(@ds, 'all') || @player == '~console') {
		run(/reloadaliases)
		if(array_contains(@ds, 'all')) { @dsall = true } else { @dsall = false }
		foreach(@script in @ds) {
			export('ch.player.'.@playerID['id'].'.dev.scripts.'.@script, true)
		}
		export('ch.player.'.@playerID['id'].'.developer', @dsall)
		export('ch.player.'.@playerID['id'].'.dev.scripts', @ds)
		die()
	}
	msg(color('red').'['.color(6).@name.color('red').'] '.color('red').'No action specified.')
	_ch_help()
default:
	msg(color('red').'['.color(6).@name.color('red').'] '.color('red').'Action not recognized.')
}
<<<